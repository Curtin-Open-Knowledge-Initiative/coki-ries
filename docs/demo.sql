
-------------------------------------------------------------------------------
-- WARNING: these queries are machine-generated. Any changes that you make   --
-- here will be overwritten on the next compilation. If a permanent query    --
-- alteration is required then modify the files in /code/queries/            --
-------------------------------------------------------------------------------
-- generated by: compile_raw.js
CREATE SCHEMA IF NOT EXISTS `rt-era.demo`;


-- generated by: raw_rors.js
BEGIN
  CREATE OR REPLACE TABLE `rt-era.demo.raw_rors` (
    ror     STRING        OPTIONS(description='Research Organisation Registry unique identifier'),
    since   STRING        OPTIONS(description='The year that the institution was established'),
    status  STRING        OPTIONS(description='Current status of the institution (filter for active)'),
    type_0  STRING        OPTIONS(description='Primary activity type (ie, types[0])'),
    country STRING        OPTIONS(description='Country in which the research institution is located'),
    name    STRING        OPTIONS(description='Name of the research institution'),
    link_0  STRING        OPTIONS(description='Primary URL (ie, links[0])'),
    types   ARRAY<STRING> OPTIONS(description='All activity types that the institution is engaged in'),
    links   ARRAY<STRING> OPTIONS(description='All links associated with the institution'),
  )                       OPTIONS(description='Official Research Organisation Registry data sourced from https://ror.readme.io/docs/data-dump');
  TRUNCATE TABLE `rt-era.demo.raw_rors`;
  LOAD DATA INTO `rt-era.demo.raw_rors` FROM FILES (
    format = 'JSON',
    uris = ['gs://rt-era-public/data/raw/raw_rors/data.jsonl']
  );  
END;


-- generated by: raw_issns.js
BEGIN
  CREATE OR REPLACE TABLE `rt-era.demo.raw_issns` (
    issn  STRING NOT NULL OPTIONS(description='ISSN'),
    issnl STRING NOT NULL OPTIONS(description='Linking ISSN'),
  )                       OPTIONS(description='Official ISSN -> ISSN-L mapping from https://www.issn.org/wp-content/uploads/2014/03/issnltables.zip');
  TRUNCATE TABLE `rt-era.demo.raw_issns`;
  LOAD DATA INTO `rt-era.demo.raw_issns` FROM FILES (
    format = 'JSON',
    uris = ['gs://rt-era-public/data/raw/raw_issns/data.jsonl']
  );
END;


-- generated by: raw_heps.js
BEGIN
  CREATE OR REPLACE TABLE `rt-era.demo.raw_heps` (
    ror  STRING OPTIONS(description='Research Organisation Registry unique identifier'),
    name STRING OPTIONS(description='Name of the research institution'),
  )             OPTIONS(description='List of Australian Higher Education Providers (HEPs) focused on by the ERA process');
  TRUNCATE TABLE `rt-era.demo.raw_heps`;
  LOAD DATA INTO `rt-era.demo.raw_heps` FROM FILES (
    format = 'JSON',
    uris = ['gs://rt-era-public/data/raw/raw_heps/data.jsonl']
  );
END;

-- generated by: raw_history.js
BEGIN
  CREATE OR REPLACE TABLE `rt-era.demo.era_historical_ratings` (
    hep_code STRING NOT NULL OPTIONS(description='short-code for the Australian institution (higher education provider)'),
    hep_name STRING NOT NULL OPTIONS(description='institution name'),
    for_vers STRING NOT NULL OPTIONS(description='version of the field of research codes being used'),
    for_code STRING NOT NULL OPTIONS(description='field of research code'),
    for_name STRING NOT NULL OPTIONS(description='field of research name'),
    era_2010 STRING NOT NULL OPTIONS(description='ERA rating assigned in 2010 (NA = not assessed)'),
    era_2012 STRING NOT NULL OPTIONS(description='ERA rating assigned in 2012 (NA = not assessed)'),
    era_2015 STRING NOT NULL OPTIONS(description='ERA rating assigned in 2015 (NA = not assessed)'),
    era_2018 STRING NOT NULL OPTIONS(description='ERA rating assigned in 2018 (NA = not assessed)'),
  )                          OPTIONS(description='Official ERA outcomes table from: https://dataportal.arc.gov.au/ERA/Web/Outcomes#/institution/');
  TRUNCATE TABLE `rt-era.demo.era_historical_ratings`;
  LOAD DATA INTO `rt-era.demo.era_historical_ratings` FROM FILES (
    format = 'JSON',
    uris = ['gs://rt-era-public/data/raw/era_historical_ratings/data.jsonl']
  );
END;


-- generated by: raw_fors.js
BEGIN
  CREATE OR REPLACE TABLE `rt-era.demo.raw_forcodes` (
    vers STRING OPTIONS(description='ANZSIC version, either 2008 or 2020'),
    code STRING OPTIONS(description='Field of research code (either 2-digit, 4-digit or 6-digit)'),
    name STRING OPTIONS(description='Field of research'),
  )             OPTIONS(description='Official Field of Research (FoR) codes sourced from Official Research Organisation Registry data sourced from http://aria.stats.govt.nz/ and https://www.abs.gov.au/');
  TRUNCATE TABLE `rt-era.demo.raw_forcodes`;
  LOAD DATA INTO `rt-era.demo.raw_forcodes` FROM FILES (
    format = 'JSON',
    uris = ['gs://rt-era-public/data/raw/raw_forcodes/data.jsonl']
  );
END;


-- generated by: raw_journals.js
BEGIN
  CREATE OR REPLACE TABLE `rt-era.demo.raw_journals_2018` (
    era_id        STRING NOT NULL  OPTIONS(description='A unique identifier assigned by the ARC'),
    title         STRING NOT NULL  OPTIONS(description='Journal title (English)'),
    foreign_title STRING NOT NULL  OPTIONS(description='Journal title (non-English) for foreign journals'),
    issns         ARRAY<STRING>    OPTIONS(description='List of ISSNs for the journal'),
    forcodes      ARRAY<STRUCT< 
      code        STRING NOT NULL  OPTIONS(description='FoR code (a string because the values are zero padded and can be "MD")'),
      name        STRING NOT NULL  OPTIONS(description='FoR name')
    >>                             OPTIONS(description='Field of Research (FoR) codes assigned by ARC to the journal'),
    weighted      ARRAY<STRUCT<
      code        STRING  NOT NULL OPTIONS(description='FoR code (a string because the values are zero padded and can be "MD")'),
      weight      INTEGER NOT NULL OPTIONS(description='Portional assignment of this FoR code')
    >>                             OPTIONS(description='Field of Research (FoR) codes assigned by ARC to the journal.'),
  )                                OPTIONS(description='Official ERA 2023 Journal List');
  TRUNCATE TABLE `rt-era.demo.raw_journals_2018`;
  LOAD DATA INTO `rt-era.demo.raw_journals_2018` FROM FILES (
    format = 'JSON',
    uris = ['gs://rt-era-public/data/raw/raw_journals_2018/data.jsonl']
  );

  CREATE OR REPLACE TABLE `rt-era.demo.raw_journals_2023` (
    era_id        STRING NOT NULL  OPTIONS(description='A unique identifier assigned by the ARC'),
    title         STRING NOT NULL  OPTIONS(description='Journal title (English)'),
    foreign_title STRING NOT NULL  OPTIONS(description='Journal title (non-English) for foreign journals'),
    issns         ARRAY<STRING>    OPTIONS(description='List of ISSNs for the journal'),
    forcodes      ARRAY<STRUCT< 
      code        STRING NOT NULL  OPTIONS(description='FoR code (a string because the values are zero padded and can be "MD")'),
      name        STRING NOT NULL  OPTIONS(description='FoR name')
    >>                             OPTIONS(description='Field of Research (FoR) codes assigned by ARC to the journal'),
    weighted      ARRAY<STRUCT<
      code        STRING  NOT NULL OPTIONS(description='FoR code (a string because the values are zero padded and can be "MD")'),
      weight      INTEGER NOT NULL OPTIONS(description='Portional assignment of this FoR code')
    >>                             OPTIONS(description='Field of Research (FoR) codes assigned by ARC to the journal.'),
  )                                OPTIONS(description='Official ERA 2023 Journal List');
  TRUNCATE TABLE `rt-era.demo.raw_journals_2023`;
  LOAD DATA INTO `rt-era.demo.raw_journals_2023` FROM FILES (
    format = 'JSON',
    uris = ['gs://rt-era-public/data/raw/raw_journals_2023/data.jsonl']
  );
END;


-- generated by: raw_papers.js
BEGIN
  CREATE OR REPLACE TABLE `rt-era.demo.raw_papers` (
    doi   STRING  NOT NULL OPTIONS(description='Digital Object Identifier for the paper'),
    year  INTEGER NOT NULL OPTIONS(description='Year of publication'),
    cits  INTEGER NOT NULL OPTIONS(description='Number of accumulated citations to date'),
    is_oa BOOLEAN NOT NULL OPTIONS(description='True if the publication is recorded as Open Access'),
    type  STRING  NOT NULL OPTIONS(description='The type of the publication, currently only contains journal-articles'),
    issns ARRAY<STRING>    OPTIONS(description='List of ISSNs for the journal associated with this publication'),
    rors  ARRAY<STRING>    OPTIONS(description='List of ROR codes for institutions affiliated with this publication'),
  )                        OPTIONS(description='Extract of publication metadata from the COKI database');
  TRUNCATE TABLE `rt-era.demo.raw_papers`;
  LOAD DATA INTO `rt-era.demo.raw_papers` FROM FILES (
    format = 'JSON',
    uris = ['gs://rt-era-public/data/raw/raw_papers/*.jsonl.gz']
  );
END;


-------------------------------------------------------------------------------
-- WARNING: these queries are machine-generated. Any changes that you make   --
-- here will be overwritten on the next compilation. If a permanent query    --
-- alteration is required then modify the files in /code/queries/            --
-------------------------------------------------------------------------------
-- generated by: compile_core.js
CREATE SCHEMA IF NOT EXISTS `rt-era.demo`;


-- generated by: core_rors.js
BEGIN 
  CREATE TABLE IF NOT EXISTS `rt-era.demo.core_rors` AS (
    SELECT 
      ror,
      since,
      status ,
      country,
      name,
      IFNULL(type_0,'') AS type_0,
      IFNULL(link_0,'') AS link_0,
      types,
      links  
    FROM rt-era.demo.raw_rors
    ORDER BY name
  );
  ALTER TABLE `rt-era.demo.core_rors` SET OPTIONS(description='Official Research Organisation Registry data sourced from https://ror.readme.io/docs/data-dump');
  ALTER TABLE rt-era.demo.core_rors
  ALTER COLUMN ror     SET OPTIONS (description='Research Organisation Registry unique identifier'),
  ALTER COLUMN since   SET OPTIONS (description='The year that the institution was established'),
  ALTER COLUMN status  SET OPTIONS (description='Current status of the institution (filter for active)'),
  ALTER COLUMN type_0  SET OPTIONS (description='Primary activity type (ie, types[0])'),
  ALTER COLUMN country SET OPTIONS (description='Country in which the research institution is located'),
  ALTER COLUMN name    SET OPTIONS (description='Name of the research institution'),
  ALTER COLUMN link_0  SET OPTIONS (description='Primary URL (ie, links[0])'),
  ALTER COLUMN types   SET OPTIONS (description='All activity types that the institution is engaged in'),
  ALTER COLUMN links   SET OPTIONS (description='All links associated with the institution');

  -- tests
  SELECT
    'there should be no nulls or empty strings' AS description,
    IF(COUNTIF(ror     IS NULL OR ror     = '') = 0, 'pass', 'fail') AS test1,
    --IF(COUNTIF(since   IS NULL OR since   =  0) = 0, 'pass', 'fail') AS test2,
    IF(COUNTIF(status  IS NULL OR status  = '') = 0, 'pass', 'fail') AS test3,
    IF(COUNTIF(country IS NULL OR country = '') = 0, 'pass', 'fail') AS test4,
    IF(COUNTIF(name    IS NULL OR name    = '') = 0, 'pass', 'fail') AS test5,
    IF(COUNTIF(type_0  IS NULL ) = 0, 'pass', 'fail') AS test6,
    IF(COUNTIF(link_0  IS NULL ) = 0, 'pass', 'fail') AS test7,
    IF(COUNTIF(types   IS NULL ) = 0, 'pass', 'fail') AS test8,
    IF(COUNTIF(links   IS NULL ) = 0, 'pass', 'fail') AS test9
  FROM `rt-era.demo.core_rors`;
END;


-- generated by: core_heps.js
BEGIN 
  CREATE TABLE IF NOT EXISTS `rt-era.demo.core_heps` AS (
    SELECT 
      A.ror,
      B.name,
      A.name AS era_name
    FROM `rt-era.demo.raw_heps` AS A
    LEFT JOIN `rt-era.demo.core_rors` AS B ON A.ror = B.ror
    ORDER BY era_name
  );
  ALTER TABLE `rt-era.demo.core_heps` SET OPTIONS(description='Australian higher education providers (list provided by ERA 2018)');
  ALTER TABLE rt-era.demo.core_heps
  ALTER COLUMN ror  SET OPTIONS (description="Institutional Research Organisations Registry code (see https://ror.org"),
  ALTER COLUMN name SET OPTIONS (description="Name of the Australian higher education provider");

  CREATE TABLE IF NOT EXISTS `rt-era.demo.core_heps_auto` AS (
    SELECT 
      ror,
      name,
    FROM rt-era.demo.core_rors
    WHERE 
      country = 'Australia' AND 
      type_0  = 'Education' AND 
      status  = 'active' 
    ORDER BY name
  );
  ALTER TABLE `rt-era.demo.core_heps_auto` SET OPTIONS(description='Australian education providers (filtered by country and activity type)');
  ALTER TABLE rt-era.demo.core_heps_auto
  ALTER COLUMN ror  SET OPTIONS (description="Institutional Research Organisations Registry code (see https://ror.org"),
  ALTER COLUMN name SET OPTIONS (description="Name of the Australian education provider");

  -- tests
  SELECT
    'there should be no nulls or empty strings' AS description,
    IF(COUNTIF(ror  IS NULL OR ror  = '') = 0, 'pass', 'fail') AS test1,
    IF(COUNTIF(name IS NULL OR name = '') = 0, 'pass', 'fail') AS test2,
  FROM rt-era.demo.core_heps;
  SELECT
    'there should be no nulls or empty strings' AS description,
    IF(COUNTIF(ror  IS NULL OR ror  = '') = 0, 'pass', 'fail') AS test1,
    IF(COUNTIF(name IS NULL OR name = '') = 0, 'pass', 'fail') AS test2,
  FROM rt-era.demo.core_heps_auto;

END;


-- generated by: core_fors.js
BEGIN 
  -- CREATE TABLE IF NOT EXISTS `rt-era.demo.core_fors` AS (
  --   SELECT '2008' as vers, LENGTH(code) AS len, code, name FROM `rt-era.demo.raw_forcodes_2008` WHERE LENGTH(code) <= 4 UNION ALL
  --   SELECT '2020' as vers, LENGTH(code) AS len, code, name FROM `rt-era.demo.raw_forcodes_2020` WHERE LENGTH(code) <= 4 UNION ALL
  --   ORDER BY vers,len,code,name
  -- );
  CREATE TABLE IF NOT EXISTS `rt-era.demo.core_fors` AS (
    SELECT 
      vers, 
      LENGTH(code) AS len, 
      code, 
      name 
    FROM `rt-era.demo.raw_forcodes` 
    WHERE LENGTH(code) <= 4 AND vers = '2020'
    ORDER BY vers,len,code,name
  );
  ALTER TABLE `rt-era.demo.core_fors` SET OPTIONS(description='Field of Research codes, defined by ANZSRC');
  ALTER TABLE rt-era.demo.core_fors
  ALTER COLUMN vers SET OPTIONS (description="The version of ANZSRC subject classification codes being used (either 2008 or 2020). See: https://www.abs.gov.au/statistics/classifications/"),
  ALTER COLUMN code SET OPTIONS (description="Field of Research (FoR) subject short-code. Either a zero-padded 2,4 or 6 digit number, or 'MD' for multidisciplinary"),
  ALTER COLUMN name SET OPTIONS (description="Field of Research (FoR) subject title");

  -- tests
  SELECT 
    'there should be no intersection between the code sets' AS description,
    IF(COUNTIF(c != 1) = 0, 'pass', 'fail') AS test 
  FROM (SELECT COUNT(1) AS c FROM `rt-era.demo.core_fors` GROUP BY code);
  SELECT
    'there should be no nulls or empty strings' AS description,
    IF(COUNT(1) = COUNTIF(vers='2008') + COUNTIF(vers='2020'), 'pass', 'fail') AS test1, 
    IF(COUNTIF(code IS NULL OR code = '') = 0                , 'pass', 'fail') AS test2,
    IF(COUNTIF(name IS NULL OR name = '') = 0                , 'pass', 'fail') AS test3,
    IF(COUNTIF(vers != '2008' AND vers != '2020') = 0        , 'pass', 'fail') AS test4
  FROM rt-era.demo.core_fors;
END;


-- generated by: core_journals.js
BEGIN
  --CREATE OR REPLACE TABLE TEMP TABLE raw_journals AS (
  CREATE TEMP TABLE raw_journals AS (
    -- SELECT '2018' as era_round, * FROM `rt-era.demo.raw_journals_2018` UNION ALL
    SELECT '2023' as era_round, * FROM `rt-era.demo.raw_journals_2023` 
  );
  SELECT COUNT(1) FROM raw_journals;

  -- -- DISABLED: the official ISSN download list is missing many legitimate ISSN values that show up in the online search. Something is wrong with it.
  -- -- filter ISSNs
  -- CREATE TEMP TABLE filtered_issns AS (
  --   SELECT 
  --     era_round,
  --     era_id, 
  --     ARRAY_AGG(DISTINCT issn IGNORE NULLS) AS issns
  --   FROM raw_journals
  --   LEFT JOIN UNNEST(issns) AS issn
  --   LEFT JOIN `rt-era.demo.xref_issn_issnl` AS B ON issn = B.issn
  --   LEFT JOIN `rt-era.demo.xref_issn_issnl` AS C ON issn = C.issnl
  --   WHERE B.issn IS NOT NULL OR C.issnl IS NOT NULL
  --   GROUP BY era_round, era_id
  -- );

  CREATE TEMP TABLE filtered_issns AS (
    SELECT 
      era_round,
      era_id, 
      ARRAY_AGG(DISTINCT issn IGNORE NULLS) AS issns
    FROM raw_journals
    LEFT JOIN UNNEST(issns) AS issn
    GROUP BY era_round, era_id
  );
  SELECT COUNT(1) FROM filtered_issns;

  -- filter FoR codes and bring in FoR names
  CREATE TEMP TABLE filtered_codes AS (
    SELECT 
      era_round,
      era_id,
      ARRAY_AGG(STRUCT(vers,len,code,name,weight)) AS codes
    FROM (
      SELECT
        era_round,
        era_id, 
        IF(era_round = '2018', '2008', '2020') AS vers,
        LENGTH(fc.code) AS len,
        fc.code,
        IF(fc.code = 'MD', 'Multidisciplinary', B.name) AS name,
        fc.weight
      FROM raw_journals 
      LEFT JOIN UNNEST(weighted) AS fc
      LEFT JOIN `rt-era.demo.core_fors` AS B ON fc.code = B.code
      WHERE fc.code = 'MD' OR B.code IS NOT NULL
    )
    GROUP BY era_round,era_id
  );
  SELECT COUNT(1) FROM filtered_codes;

  -- create the final table by excluding values that have no valid ISSN or FoR code
  CREATE TABLE IF NOT EXISTS `rt-era.demo.core_journals` AS (
    SELECT 
      A.era_round,
      A.era_id,
      A.title,
      A.foreign_title AS ftitle,
      B.issns AS issns,
      C.codes AS fors
    FROM raw_journals AS A
    INNER JOIN filtered_issns AS B ON A.era_round = B.era_round AND A.era_id = B.era_id AND ARRAY_LENGTH(B.issns) > 0
    INNER JOIN filtered_codes AS C ON A.era_round = C.era_round AND A.era_id = C.era_id AND ARRAY_LENGTH(C.codes) > 0
    ORDER BY era_round,CAST(era_id AS INTEGER)
  );
  ALTER TABLE `rt-era.demo.core_journals` SET OPTIONS(description="The ERA Journal List after filtering (see also raw_journals)");
  ALTER TABLE rt-era.demo.core_journals
  ALTER COLUMN era_round SET OPTIONS (description="Year of the ERA round"),
  ALTER COLUMN era_id    SET OPTIONS (description="A unique identifier assigned by the ARC"),
  ALTER COLUMN title     SET OPTIONS (description="English title of the journal"),
  ALTER COLUMN ftitle    SET OPTIONS (description="Non-English title of the journal"),
  ALTER COLUMN fors      SET OPTIONS (description="A list of Field of Research codes that have been assigned to the journal by the ARC"),
  ALTER COLUMN issns     SET OPTIONS (description="A list of ISSN codes associated with the journal");

  -- tests
  SELECT 'all journals should have at least one valid ISSN' AS description, IF(COUNTIF(ARRAY_LENGTH(issns) = 0) = 0, 'pass', 'fail') AS test FROM filtered_issns;
  SELECT 'all journals should have at least one valid FoR'  AS description, IF(COUNTIF(ARRAY_LENGTH(codes) = 0) = 0, 'pass', 'fail') AS test FROM filtered_codes;
  SELECT 'there should be no colliding ISSN values'         AS description, IF(COUNTIF(ARRAY_LENGTH(ids)  != 1) = 0, 'pass', 'fail') AS test FROM (
    SELECT ARRAY_AGG(DISTINCT era_id IGNORE NULLS) AS ids
    FROM rt-era.demo.core_journals
    LEFT JOIN UNNEST(issns) AS issn
    GROUP BY era_round,issn
  );
  SELECT 'certain fields should not be empty or null' AS description,
    IF(COUNTIF(era_id IS NULL OR era_id = '') = 0, 'pass', 'fail') AS test1,
    IF(COUNTIF(title  IS NULL OR title  = '') = 0, 'pass', 'fail') AS test2,
    IF(COUNTIF(ftitle IS NULL               ) = 0, 'pass', 'fail') AS test3
  FROM rt-era.demo.core_journals;

  SELECT 'dropped journal 2018', A.*
  FROM `rt-era.demo.raw_journals_2018` AS A
  LEFT JOIN `rt-era.demo.core_journals` AS B ON A.era_id = B.era_id AND B.era_round = '2018'
  WHERE B.era_id IS NULL;

  SELECT 'dropped journal 2023', A.*
  FROM `rt-era.demo.raw_journals_2023` AS A
  LEFT JOIN `rt-era.demo.core_journals` AS B ON A.era_id = B.era_id AND B.era_round = '2023'
  WHERE B.era_id IS NULL;

END;


-- generated by: core_papers.js
BEGIN 
  -- extract a subset of papers filtered for basic ERA compatibility (to be refined downstream)
  CREATE TEMP TABLE base_papers AS (
    SELECT 
      doi,
      -- title,
      -- authors,
      year AS year_published, 
      is_oa, 
      type AS output_type, 
      cits AS num_citations, 
      issns, 
      rors 
    FROM rt-era.demo.raw_papers
    WHERE 
      doi IS NOT NULL AND doi != ''  -- must be an identified paper
      AND year BETWEEN 2011 AND 2021 -- must be published within the ERA period
      AND ARRAY_LENGTH(issns) > 0    -- must be linkable to a journal
      --AND ARRAY_LENGTH(rors) > 0   -- must be linkable to at least one institution
      AND type = 'journal-article'   -- must be a journal article
    
  );
  SELECT 'is a journal article, in the ERA period, with at least one ISSN', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniques FROM base_papers;

  -- filter for papers that can be linked to an ERA journal (via ISSN)
  CREATE TEMP TABLE filter_journals AS (
    SELECT doi, ARRAY_AGG(DISTINCT era_id IGNORE NULLS) AS era_ids
    FROM base_papers
    LEFT JOIN UNNEST(issns) AS issn 
    INNER JOIN (
      SELECT era_round, era_id, issn
      FROM rt-era.demo.core_journals
      LEFT JOIN UNNEST(issns) AS issn
    ) AS B
    ON issn = B.issn
    GROUP BY doi
  );
  SELECT 'links to at least one ERA journal', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniques FROM filter_journals;

  -- filter for recognised institutions (RoR)
  CREATE TEMP TABLE filter_rors AS (
    SELECT doi, ARRAY_AGG(DISTINCT ror IGNORE NULLS) AS rors
    FROM base_papers
    LEFT JOIN UNNEST(rors) AS ror
    INNER JOIN `rt-era.demo.core_rors` AS X ON ror = X.ror
    GROUP BY doi
  );
  SELECT 'has at least one recognised RoR', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniques FROM filter_rors;

  -- filter for recognised HEPs
  CREATE TEMP TABLE filter_heps AS (
    SELECT doi, ARRAY_AGG(DISTINCT ror IGNORE NULLS) AS rors
    FROM filter_rors
    LEFT JOIN UNNEST(rors) AS ror
    INNER JOIN `rt-era.demo.core_heps` AS X ON ror = X.ror 
    GROUP BY doi
  );
  SELECT 'has at least one recognised HEP RoR', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniques FROM filter_heps;

  -- filter for recognised ISSNs
  -- DISABLED: the official ISSN download list is missing many legitimate ISSN values that show up in the online search. Something is wrong with it.
  -- CREATE TEMP TABLE filter_issns AS (
  --   SELECT doi, ARRAY_AGG(DISTINCT issn IGNORE NULLS) AS issns
  --   FROM base_papers
  --   LEFT JOIN UNNEST(issns) AS issn 
  --   INNER JOIN `rt-era.demo.xref_issn_issnl` AS X ON issn = X.issn 
  --   GROUP BY doi
  -- );
  -- SELECT 'has at least one recognised ISSN', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniques FROM filter_issns;

  -- create the draft table
  CREATE TEMP TABLE final_unfiltered AS (
    SELECT 
      A.doi,
      --A.title,
      --A.authors,
      A.year_published, 
      A.num_citations,
      A.is_oa,
      A.output_type,
      B.era_ids,
      C.rors,
      D.rors AS heps,
      A.issns
      --E.issns
    FROM       base_papers     AS A
    INNER JOIN filter_journals AS B ON A.doi = B.doi -- filter data
    INNER JOIN filter_rors     AS C ON A.doi = C.doi -- filter data
    LEFT  JOIN filter_heps     AS D ON A.doi = D.doi -- add data
    --LEFT  JOIN filter_issns    AS E ON A.doi = E.doi -- add data
  );
  SELECT 'papers with more than one era_id', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniques FROM final_unfiltered WHERE ARRAY_LENGTH(era_ids) != 1;

  -- create the final table
  CREATE TEMP TABLE final_filtered AS (
    SELECT 
      doi,
      era_ids[OFFSET(0)] AS era_id,
      --title,
      --authors,
      year_published, 
      num_citations,
      is_oa,
      rors,
      heps,
    FROM final_unfiltered
    WHERE ARRAY_LENGTH(era_ids) = 1
  );
  SELECT 'papers with only one era_id', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniques FROM final_filtered;

  -- finally, add the fors with weights inherited from journals (for now, this will be changed in the future)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.core_papers` AS (
    SELECT A.*, B.fors
    FROM final_filtered AS A
    INNER JOIN `rt-era.demo.core_journals` AS B ON A.era_id = B.era_id AND ARRAY_LENGTH(B.fors) > 0
    ORDER BY year_published, num_citations DESC
  );
  SELECT 'final number of papers', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniques FROM rt-era.demo.core_papers;
  
  -- set the schema
  ALTER TABLE `rt-era.demo.core_papers` SET OPTIONS(description='A subset of the COKI DOI dataset that only includes journal articles relevant to ERA analysis');
  ALTER TABLE rt-era.demo.core_papers
  ALTER COLUMN doi            SET OPTIONS (description='unique ID for a paper. Digital Object Identifier: https://www.doi.org/'),
  ALTER COLUMN year_published SET OPTIONS (description='year of publication for the paper (source: crossref)'),
  ALTER COLUMN num_citations  SET OPTIONS (description='the number of citations the paper has accumulated since publication (source: crossref & opencitations)'),
  ALTER COLUMN is_oa          SET OPTIONS (description='true if the output has been identified by Unpaywall as Open Access'),
  ALTER COLUMN era_id         SET OPTIONS (description='the ERA Journal ID of the journal that published this paper'),
  ALTER COLUMN rors           SET OPTIONS (description='unique RoR identifiers for all institutions associated with the work'),
  ALTER COLUMN heps           SET OPTIONS (description='unique RoR identifiers for Australian higher education providers associated with the work'),
  ALTER COLUMN fors           SET OPTIONS (description='field of research codes with weightings (currently) inherited from the publishing journal');

  -- run tests
  SELECT 'certain fields should not be empty or null' AS description,
    IF(COUNTIF(doi    IS NULL OR doi    = '') = 0, 'pass', 'fail') AS test1,
    IF(COUNTIF(era_id IS NULL OR era_id = '') = 0, 'pass', 'fail') AS test2,
    IF(COUNTIF(ARRAY_LENGTH(rors)       = 0 ) = 0, 'pass', 'fail') AS test3,
    IF(COUNTIF(ARRAY_LENGTH(fors)       = 0 ) = 0, 'pass', 'fail') AS test4
  FROM rt-era.demo.core_papers;
END;


-- generated by: core_outputs.js
BEGIN
  -- base table that the rest of the tables build from
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_base` AS (
    SELECT 
      A.year_published  AS year,
      A.era_id          AS journal,
      A.doi             AS paper,
      A.num_citations   AS cits,
      ror               AS inst,
      NOT B.ror IS NULL AS is_hep, -- flag set to true if the institution is an Australian HEP
      fc.code           AS field,
      SUBSTRING(fc.code,0,2) AS field2, -- two digit FoR code
      fc.weight         AS frac
    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(rors) AS ror
    LEFT JOIN UNNEST(fors) AS fc
    LEFT JOIN `rt-era.demo.core_heps` AS B ON ror = B.ror
    ORDER BY inst,field,year
  );
  SELECT 
    'sanity checking counts in base table',
    COUNT(DISTINCT paper)   AS unique_papers,
    COUNT(DISTINCT inst)    AS unique_institutions,
    COUNT(DISTINCT journal) AS unique_journals,
    COUNT(DISTINCT field)   AS unique_fields,
    COUNT(DISTINCT year)    AS unique_years,
    COUNT(1)                AS total_rows
  FROM rt-era.demo.research_outputs_world_base;
END;


-------------------------------------------------------------------------------
-- WARNING: these queries are machine-generated. Any changes that you make   --
-- here will be overwritten on the next compilation. If a permanent query    --
-- alteration is required then modify the files in /code/queries/            --
-------------------------------------------------------------------------------
-- generated by: compile_benchmarks.js
CREATE SCHEMA IF NOT EXISTS `rt-era.demo`;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 4digit (institution,field,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_4_institution_field_year` AS (
    SELECT 
      institution,field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_world_4_institution_field_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 4digit (institution,field)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_4_institution_field` AS (
    SELECT 
      institution,field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT field) AS num_fields FROM `rt-era.demo.research_outputs_world_4_institution_field`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 4digit (institution,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_4_institution_year` AS (
    SELECT 
      institution,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_world_4_institution_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 4digit (field,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_4_field_year` AS (
    SELECT 
      field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_world_4_field_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 4digit (institution)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_4_institution` AS (
    SELECT 
      institution,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        null AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions FROM `rt-era.demo.research_outputs_world_4_institution`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 4digit (field)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_4_field` AS (
    SELECT 
      field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields FROM `rt-era.demo.research_outputs_world_4_field`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 4digit (year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_4_year` AS (
    SELECT 
      year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_world_4_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 2digit (institution,field,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_2_institution_field_year` AS (
    SELECT 
      institution,field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_world_2_institution_field_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 2digit (institution,field)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_2_institution_field` AS (
    SELECT 
      institution,field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT field) AS num_fields FROM `rt-era.demo.research_outputs_world_2_institution_field`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 2digit (institution,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_2_institution_year` AS (
    SELECT 
      institution,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_world_2_institution_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 2digit (field,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_2_field_year` AS (
    SELECT 
      field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_world_2_field_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 2digit (institution)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_2_institution` AS (
    SELECT 
      institution,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        null AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions FROM `rt-era.demo.research_outputs_world_2_institution`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 2digit (field)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_2_field` AS (
    SELECT 
      field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields FROM `rt-era.demo.research_outputs_world_2_field`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table world 2digit (year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_world_2_year` AS (
    SELECT 
      year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_world_2_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 4digit (institution,field,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_4_institution_field_year` AS (
    SELECT 
      institution,field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_local_4_institution_field_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 4digit (institution,field)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_4_institution_field` AS (
    SELECT 
      institution,field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT field) AS num_fields FROM `rt-era.demo.research_outputs_local_4_institution_field`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 4digit (institution,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_4_institution_year` AS (
    SELECT 
      institution,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_local_4_institution_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 4digit (field,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_4_field_year` AS (
    SELECT 
      field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_local_4_field_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 4digit (institution)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_4_institution` AS (
    SELECT 
      institution,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        null AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions FROM `rt-era.demo.research_outputs_local_4_institution`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 4digit (field)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_4_field` AS (
    SELECT 
      field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields FROM `rt-era.demo.research_outputs_local_4_field`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 4digit (year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_4_year` AS (
    SELECT 
      year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 4 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_local_4_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 2digit (institution,field,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_2_institution_field_year` AS (
    SELECT 
      institution,field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_local_2_institution_field_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 2digit (institution,field)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_2_institution_field` AS (
    SELECT 
      institution,field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT field) AS num_fields FROM `rt-era.demo.research_outputs_local_2_institution_field`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 2digit (institution,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_2_institution_year` AS (
    SELECT 
      institution,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_local_2_institution_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 2digit (field,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_2_field_year` AS (
    SELECT 
      field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_local_2_field_year`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 2digit (institution)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_2_institution` AS (
    SELECT 
      institution,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        inst AS institution,
        null AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT institution) AS num_institutions FROM `rt-era.demo.research_outputs_local_2_institution`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 2digit (field)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_2_field` AS (
    SELECT 
      field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields FROM `rt-era.demo.research_outputs_local_2_field`;
END;


-- generated by: benchmark_outputs.js
BEGIN
  -- create outputs table local 2digit (year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo.research_outputs_local_2_year` AS (
    SELECT 
      year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT
        null AS institution,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM `rt-era.demo.research_outputs_world_base`
      WHERE LENGTH(field) >= 2 AND is_hep
      GROUP BY paper,institution,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT year) AS num_years FROM `rt-era.demo.research_outputs_local_2_year`;
END;


-- generated by: benchmark_cpp.js
BEGIN
  -- compute CPP (citation per paper) benchmarks [world,4]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_cpp_world_4` AS (
    SELECT 
      SUBSTRING(B.code,0,4)  AS code,
      year_published                 AS year,
      COUNT(1)                       AS num_papers,
      COUNTIF(num_citations > 0)     AS num_cited,
      COUNTIF(num_citations = 0)     AS num_uncited,
      SUM(num_citations)             AS sum_citations,
      MAX(num_citations)             AS max_citations,
      AVG(num_citations)             AS avg_citations,
      STDDEV(num_citations)          AS sdev_citations,
      0.0                            AS benchmark
    FROM `rt-era.demo.core_papers` AS A
    INNER JOIN UNNEST(fors) AS B 
    WHERE LENGTH(B.code) >= 4 
    GROUP BY code,year 
    ORDER BY code,year
  );
  UPDATE `rt-era.demo.benchmarks_cpp_world_4` SET benchmark = sum_citations / num_papers WHERE num_papers > 0;
END;

-- generated by: benchmark_cpp.js
BEGIN
  -- compute CPP (citation per paper) benchmarks [world,2]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_cpp_world_2` AS (
    SELECT 
      SUBSTRING(B.code,0,2)  AS code,
      year_published                 AS year,
      COUNT(1)                       AS num_papers,
      COUNTIF(num_citations > 0)     AS num_cited,
      COUNTIF(num_citations = 0)     AS num_uncited,
      SUM(num_citations)             AS sum_citations,
      MAX(num_citations)             AS max_citations,
      AVG(num_citations)             AS avg_citations,
      STDDEV(num_citations)          AS sdev_citations,
      0.0                            AS benchmark
    FROM `rt-era.demo.core_papers` AS A
    INNER JOIN UNNEST(fors) AS B 
    WHERE LENGTH(B.code) >= 2 
    GROUP BY code,year 
    ORDER BY code,year
  );
  UPDATE `rt-era.demo.benchmarks_cpp_world_2` SET benchmark = sum_citations / num_papers WHERE num_papers > 0;
END;

-- generated by: benchmark_cpp.js
BEGIN
  -- compute CPP (citation per paper) benchmarks [local,4]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_cpp_local_4` AS (
    SELECT 
      SUBSTRING(B.code,0,4)  AS code,
      year_published                 AS year,
      COUNT(1)                       AS num_papers,
      COUNTIF(num_citations > 0)     AS num_cited,
      COUNTIF(num_citations = 0)     AS num_uncited,
      SUM(num_citations)             AS sum_citations,
      MAX(num_citations)             AS max_citations,
      AVG(num_citations)             AS avg_citations,
      STDDEV(num_citations)          AS sdev_citations,
      0.0                            AS benchmark
    FROM `rt-era.demo.core_papers` AS A
    INNER JOIN UNNEST(fors) AS B 
    WHERE LENGTH(B.code) >= 4 AND ARRAY_LENGTH(heps) > 0
    GROUP BY code,year 
    ORDER BY code,year
  );
  UPDATE `rt-era.demo.benchmarks_cpp_local_4` SET benchmark = sum_citations / num_papers WHERE num_papers > 0;
END;

-- generated by: benchmark_cpp.js
BEGIN
  -- compute CPP (citation per paper) benchmarks [local,2]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_cpp_local_2` AS (
    SELECT 
      SUBSTRING(B.code,0,2)  AS code,
      year_published                 AS year,
      COUNT(1)                       AS num_papers,
      COUNTIF(num_citations > 0)     AS num_cited,
      COUNTIF(num_citations = 0)     AS num_uncited,
      SUM(num_citations)             AS sum_citations,
      MAX(num_citations)             AS max_citations,
      AVG(num_citations)             AS avg_citations,
      STDDEV(num_citations)          AS sdev_citations,
      0.0                            AS benchmark
    FROM `rt-era.demo.core_papers` AS A
    INNER JOIN UNNEST(fors) AS B 
    WHERE LENGTH(B.code) >= 2 AND ARRAY_LENGTH(heps) > 0
    GROUP BY code,year 
    ORDER BY code,year
  );
  UPDATE `rt-era.demo.benchmarks_cpp_local_2` SET benchmark = sum_citations / num_papers WHERE num_papers > 0;
END;

-- generated by: benchmark_centiles.js
BEGIN
  -- citation centile boundaries [world,4]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_centiles_world_4` AS (
    SELECT DISTINCT 
      F.code AS field, 
      year_published AS year, 
      PERCENTILE_DISC(num_citations, 0.99 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c1, 
      PERCENTILE_DISC(num_citations, 0.95 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c5, 
      PERCENTILE_DISC(num_citations, 0.90 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c10, 
      PERCENTILE_DISC(num_citations, 0.75 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c25, 
      PERCENTILE_DISC(num_citations, 0.50 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c50, 
      COUNT(DISTINCT doi) OVER(PARTITION BY F.code, year_published) AS num_outputs
    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(fors) AS F
    WHERE LENGTH(F.code) >= 4 
    ORDER BY field,year
  );

  -- gather statistics for each centile group [world,4]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.centile_tallies_world_4` AS (
    SELECT 
      F.code AS field,
      year_published AS year,

      COUNTIF(num_citations >= c1                          ) AS papers_1,
      COUNTIF(num_citations >= c5   AND num_citations < c1 ) AS papers_5,
      COUNTIF(num_citations >= c10  AND num_citations < c5 ) AS papers_10,
      COUNTIF(num_citations >= c25  AND num_citations < c10) AS papers_25,
      COUNTIF(num_citations >= c50  AND num_citations < c25) AS papers_50,
      COUNTIF(num_citations != 0    AND num_citations < c50) AS papers_100,
      COUNTIF(num_citations  = 0                           ) AS papers_uncited,
      COUNT(1)                                               AS papers_all,

      SUM(IF(num_citations >= c1                          , num_citations, 0)) AS citations_1,
      SUM(IF(num_citations >= c5   AND num_citations < c1 , num_citations, 0)) AS citations_5,
      SUM(IF(num_citations >= c10  AND num_citations < c5 , num_citations, 0)) AS citations_10,
      SUM(IF(num_citations >= c25  AND num_citations < c10, num_citations, 0)) AS citations_25,
      SUM(IF(num_citations >= c50  AND num_citations < c25, num_citations, 0)) AS citations_50,
      SUM(IF(num_citations != 0    AND num_citations < c50, num_citations, 0)) AS citations_100,
      SUM(IF(num_citations  = 0                           , num_citations, 0)) AS citations_uncited,
      SUM(                                                  num_citations    ) AS citations_all,

      ROUND(SUM(IF(num_citations >= c1                          , weight, 0)),2) AS portions_1,
      ROUND(SUM(IF(num_citations >= c5   AND num_citations < c1 , weight, 0)),2) AS portions_5,
      ROUND(SUM(IF(num_citations >= c10  AND num_citations < c5 , weight, 0)),2) AS portions_10,
      ROUND(SUM(IF(num_citations >= c25  AND num_citations < c10, weight, 0)),2) AS portions_25,
      ROUND(SUM(IF(num_citations >= c50  AND num_citations < c25, weight, 0)),2) AS portions_50,
      ROUND(SUM(IF(num_citations != 0    AND num_citations < c50, weight, 0)),2) AS portions_100,
      ROUND(SUM(IF(num_citations  = 0                           , weight, 0)),2) AS portions_uncited,
      ROUND(SUM(                                                  weight    ),2) AS portions_all

    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(fors) AS F
    LEFT JOIN `rt-era.demo.benchmarks_centiles_world_4` AS B ON F.code = B.field AND year_published = B.year
    WHERE LENGTH(F.code) >= 4 
    GROUP BY field,year 
    ORDER BY field,year 
  );
END;


-- generated by: benchmark_centiles.js
BEGIN
  -- citation centile boundaries [world,2]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_centiles_world_2` AS (
    SELECT DISTINCT 
      F.code AS field, 
      year_published AS year, 
      PERCENTILE_DISC(num_citations, 0.99 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c1, 
      PERCENTILE_DISC(num_citations, 0.95 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c5, 
      PERCENTILE_DISC(num_citations, 0.90 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c10, 
      PERCENTILE_DISC(num_citations, 0.75 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c25, 
      PERCENTILE_DISC(num_citations, 0.50 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c50, 
      COUNT(DISTINCT doi) OVER(PARTITION BY F.code, year_published) AS num_outputs
    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(fors) AS F
    WHERE LENGTH(F.code) >= 2 
    ORDER BY field,year
  );

  -- gather statistics for each centile group [world,2]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.centile_tallies_world_2` AS (
    SELECT 
      F.code AS field,
      year_published AS year,

      COUNTIF(num_citations >= c1                          ) AS papers_1,
      COUNTIF(num_citations >= c5   AND num_citations < c1 ) AS papers_5,
      COUNTIF(num_citations >= c10  AND num_citations < c5 ) AS papers_10,
      COUNTIF(num_citations >= c25  AND num_citations < c10) AS papers_25,
      COUNTIF(num_citations >= c50  AND num_citations < c25) AS papers_50,
      COUNTIF(num_citations != 0    AND num_citations < c50) AS papers_100,
      COUNTIF(num_citations  = 0                           ) AS papers_uncited,
      COUNT(1)                                               AS papers_all,

      SUM(IF(num_citations >= c1                          , num_citations, 0)) AS citations_1,
      SUM(IF(num_citations >= c5   AND num_citations < c1 , num_citations, 0)) AS citations_5,
      SUM(IF(num_citations >= c10  AND num_citations < c5 , num_citations, 0)) AS citations_10,
      SUM(IF(num_citations >= c25  AND num_citations < c10, num_citations, 0)) AS citations_25,
      SUM(IF(num_citations >= c50  AND num_citations < c25, num_citations, 0)) AS citations_50,
      SUM(IF(num_citations != 0    AND num_citations < c50, num_citations, 0)) AS citations_100,
      SUM(IF(num_citations  = 0                           , num_citations, 0)) AS citations_uncited,
      SUM(                                                  num_citations    ) AS citations_all,

      ROUND(SUM(IF(num_citations >= c1                          , weight, 0)),2) AS portions_1,
      ROUND(SUM(IF(num_citations >= c5   AND num_citations < c1 , weight, 0)),2) AS portions_5,
      ROUND(SUM(IF(num_citations >= c10  AND num_citations < c5 , weight, 0)),2) AS portions_10,
      ROUND(SUM(IF(num_citations >= c25  AND num_citations < c10, weight, 0)),2) AS portions_25,
      ROUND(SUM(IF(num_citations >= c50  AND num_citations < c25, weight, 0)),2) AS portions_50,
      ROUND(SUM(IF(num_citations != 0    AND num_citations < c50, weight, 0)),2) AS portions_100,
      ROUND(SUM(IF(num_citations  = 0                           , weight, 0)),2) AS portions_uncited,
      ROUND(SUM(                                                  weight    ),2) AS portions_all

    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(fors) AS F
    LEFT JOIN `rt-era.demo.benchmarks_centiles_world_2` AS B ON F.code = B.field AND year_published = B.year
    WHERE LENGTH(F.code) >= 2 
    GROUP BY field,year 
    ORDER BY field,year 
  );
END;


-- generated by: benchmark_centiles.js
BEGIN
  -- citation centile boundaries [local,4]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_centiles_local_4` AS (
    SELECT DISTINCT 
      F.code AS field, 
      year_published AS year, 
      PERCENTILE_DISC(num_citations, 0.99 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c1, 
      PERCENTILE_DISC(num_citations, 0.95 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c5, 
      PERCENTILE_DISC(num_citations, 0.90 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c10, 
      PERCENTILE_DISC(num_citations, 0.75 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c25, 
      PERCENTILE_DISC(num_citations, 0.50 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c50, 
      COUNT(DISTINCT doi) OVER(PARTITION BY F.code, year_published) AS num_outputs
    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(fors) AS F
    WHERE LENGTH(F.code) >= 4 AND ARRAY_LENGTH(heps) > 0
    ORDER BY field,year
  );

  -- gather statistics for each centile group [local,4]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.centile_tallies_local_4` AS (
    SELECT 
      F.code AS field,
      year_published AS year,

      COUNTIF(num_citations >= c1                          ) AS papers_1,
      COUNTIF(num_citations >= c5   AND num_citations < c1 ) AS papers_5,
      COUNTIF(num_citations >= c10  AND num_citations < c5 ) AS papers_10,
      COUNTIF(num_citations >= c25  AND num_citations < c10) AS papers_25,
      COUNTIF(num_citations >= c50  AND num_citations < c25) AS papers_50,
      COUNTIF(num_citations != 0    AND num_citations < c50) AS papers_100,
      COUNTIF(num_citations  = 0                           ) AS papers_uncited,
      COUNT(1)                                               AS papers_all,

      SUM(IF(num_citations >= c1                          , num_citations, 0)) AS citations_1,
      SUM(IF(num_citations >= c5   AND num_citations < c1 , num_citations, 0)) AS citations_5,
      SUM(IF(num_citations >= c10  AND num_citations < c5 , num_citations, 0)) AS citations_10,
      SUM(IF(num_citations >= c25  AND num_citations < c10, num_citations, 0)) AS citations_25,
      SUM(IF(num_citations >= c50  AND num_citations < c25, num_citations, 0)) AS citations_50,
      SUM(IF(num_citations != 0    AND num_citations < c50, num_citations, 0)) AS citations_100,
      SUM(IF(num_citations  = 0                           , num_citations, 0)) AS citations_uncited,
      SUM(                                                  num_citations    ) AS citations_all,

      ROUND(SUM(IF(num_citations >= c1                          , weight, 0)),2) AS portions_1,
      ROUND(SUM(IF(num_citations >= c5   AND num_citations < c1 , weight, 0)),2) AS portions_5,
      ROUND(SUM(IF(num_citations >= c10  AND num_citations < c5 , weight, 0)),2) AS portions_10,
      ROUND(SUM(IF(num_citations >= c25  AND num_citations < c10, weight, 0)),2) AS portions_25,
      ROUND(SUM(IF(num_citations >= c50  AND num_citations < c25, weight, 0)),2) AS portions_50,
      ROUND(SUM(IF(num_citations != 0    AND num_citations < c50, weight, 0)),2) AS portions_100,
      ROUND(SUM(IF(num_citations  = 0                           , weight, 0)),2) AS portions_uncited,
      ROUND(SUM(                                                  weight    ),2) AS portions_all

    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(fors) AS F
    LEFT JOIN `rt-era.demo.benchmarks_centiles_local_4` AS B ON F.code = B.field AND year_published = B.year
    WHERE LENGTH(F.code) >= 4 AND ARRAY_LENGTH(heps) > 0
    GROUP BY field,year 
    ORDER BY field,year 
  );
END;


-- generated by: benchmark_centiles.js
BEGIN
  -- citation centile boundaries [local,2]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_centiles_local_2` AS (
    SELECT DISTINCT 
      F.code AS field, 
      year_published AS year, 
      PERCENTILE_DISC(num_citations, 0.99 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c1, 
      PERCENTILE_DISC(num_citations, 0.95 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c5, 
      PERCENTILE_DISC(num_citations, 0.90 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c10, 
      PERCENTILE_DISC(num_citations, 0.75 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c25, 
      PERCENTILE_DISC(num_citations, 0.50 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c50, 
      COUNT(DISTINCT doi) OVER(PARTITION BY F.code, year_published) AS num_outputs
    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(fors) AS F
    WHERE LENGTH(F.code) >= 2 AND ARRAY_LENGTH(heps) > 0
    ORDER BY field,year
  );

  -- gather statistics for each centile group [local,2]
  CREATE TABLE IF NOT EXISTS `rt-era.demo.centile_tallies_local_2` AS (
    SELECT 
      F.code AS field,
      year_published AS year,

      COUNTIF(num_citations >= c1                          ) AS papers_1,
      COUNTIF(num_citations >= c5   AND num_citations < c1 ) AS papers_5,
      COUNTIF(num_citations >= c10  AND num_citations < c5 ) AS papers_10,
      COUNTIF(num_citations >= c25  AND num_citations < c10) AS papers_25,
      COUNTIF(num_citations >= c50  AND num_citations < c25) AS papers_50,
      COUNTIF(num_citations != 0    AND num_citations < c50) AS papers_100,
      COUNTIF(num_citations  = 0                           ) AS papers_uncited,
      COUNT(1)                                               AS papers_all,

      SUM(IF(num_citations >= c1                          , num_citations, 0)) AS citations_1,
      SUM(IF(num_citations >= c5   AND num_citations < c1 , num_citations, 0)) AS citations_5,
      SUM(IF(num_citations >= c10  AND num_citations < c5 , num_citations, 0)) AS citations_10,
      SUM(IF(num_citations >= c25  AND num_citations < c10, num_citations, 0)) AS citations_25,
      SUM(IF(num_citations >= c50  AND num_citations < c25, num_citations, 0)) AS citations_50,
      SUM(IF(num_citations != 0    AND num_citations < c50, num_citations, 0)) AS citations_100,
      SUM(IF(num_citations  = 0                           , num_citations, 0)) AS citations_uncited,
      SUM(                                                  num_citations    ) AS citations_all,

      ROUND(SUM(IF(num_citations >= c1                          , weight, 0)),2) AS portions_1,
      ROUND(SUM(IF(num_citations >= c5   AND num_citations < c1 , weight, 0)),2) AS portions_5,
      ROUND(SUM(IF(num_citations >= c10  AND num_citations < c5 , weight, 0)),2) AS portions_10,
      ROUND(SUM(IF(num_citations >= c25  AND num_citations < c10, weight, 0)),2) AS portions_25,
      ROUND(SUM(IF(num_citations >= c50  AND num_citations < c25, weight, 0)),2) AS portions_50,
      ROUND(SUM(IF(num_citations != 0    AND num_citations < c50, weight, 0)),2) AS portions_100,
      ROUND(SUM(IF(num_citations  = 0                           , weight, 0)),2) AS portions_uncited,
      ROUND(SUM(                                                  weight    ),2) AS portions_all

    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(fors) AS F
    LEFT JOIN `rt-era.demo.benchmarks_centiles_local_2` AS B ON F.code = B.field AND year_published = B.year
    WHERE LENGTH(F.code) >= 2 AND ARRAY_LENGTH(heps) > 0
    GROUP BY field,year 
    ORDER BY field,year 
  );
END;


-- generated by: benchmark_hpi.js
BEGIN
  -- build the High Performance Indicator benchmark table
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_hpi_world_4` AS (
    
    -- filter for active institutions (>= 50 outputs in a field)
    WITH active_institutions AS (
      SELECT institution, field, sum_papers, sum_citations
      FROM `rt-era.demo.research_outputs_world_4_institution_field`
      WHERE sum_papers >= 50
    ),
    
    -- filter for active fields
    active_fields AS (
      SELECT field, num_active FROM (
        SELECT COUNT(1) AS num_active, field
        FROM active_institutions
        GROUP BY field
      )
      WHERE num_active >= 10
    )

    -- create the benchmark table
    SELECT
      field,
      year,
      COUNT(DISTINCT institution)          AS num_institutions,
      SUM(sum_papers)                      AS sum_papers,
      SUM(sum_citations)                   AS sum_citations,
      SUM(sum_citations) / SUM(sum_papers) AS benchmark
    FROM (
      SELECT 
        A.institution, 
        A.field, 
        A.year, 
        A.sum_papers, 
        A.sum_citations,
        A.avg_citations,
        PERCENT_RANK() OVER (PARTITION BY A.field, A.year ORDER BY A.avg_citations DESC) AS pct_rank
      FROM `rt-era.demo.research_outputs_world_4_institution_field_year` AS A
      INNER JOIN active_institutions AS B ON A.institution = B.institution
      INNER JOIN active_fields       AS C ON A.field = C.field
    )
    WHERE pct_rank <= 0.1
    GROUP BY field,year
    ORDER BY field,year
  );
  ALTER TABLE `rt-era.demo.benchmarks_hpi_world_4`
  ALTER COLUMN field            SET OPTIONS (description="Field of Research (FoR) code (4-digits)"),
  ALTER COLUMN year             SET OPTIONS (description="Year of consideration (research outputs published in this year)"),
  ALTER COLUMN num_institutions SET OPTIONS (description="The number of high performing institutions that made it into the top 10%"),
  ALTER COLUMN sum_papers       SET OPTIONS (description="The number of papers published by the top 10% of institutions"),
  ALTER COLUMN sum_citations    SET OPTIONS (description="The total number of citations for outputs published by the top 10% of institutions"),
  ALTER COLUMN benchmark        SET OPTIONS (description="The average CPP (citations per paper) for the top 10% of institutions");
END;


-- generated by: benchmark_hpi.js
BEGIN
  -- build the High Performance Indicator benchmark table
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_hpi_world_2` AS (
    
    -- filter for active institutions (>= 50 outputs in a field)
    WITH active_institutions AS (
      SELECT institution, field, sum_papers, sum_citations
      FROM `rt-era.demo.research_outputs_world_2_institution_field`
      WHERE sum_papers >= 50
    ),
    
    -- filter for active fields
    active_fields AS (
      SELECT field, num_active FROM (
        SELECT COUNT(1) AS num_active, field
        FROM active_institutions
        GROUP BY field
      )
      WHERE num_active >= 10
    )

    -- create the benchmark table
    SELECT
      field,
      year,
      COUNT(DISTINCT institution)          AS num_institutions,
      SUM(sum_papers)                      AS sum_papers,
      SUM(sum_citations)                   AS sum_citations,
      SUM(sum_citations) / SUM(sum_papers) AS benchmark
    FROM (
      SELECT 
        A.institution, 
        A.field, 
        A.year, 
        A.sum_papers, 
        A.sum_citations,
        A.avg_citations,
        PERCENT_RANK() OVER (PARTITION BY A.field, A.year ORDER BY A.avg_citations DESC) AS pct_rank
      FROM `rt-era.demo.research_outputs_world_2_institution_field_year` AS A
      INNER JOIN active_institutions AS B ON A.institution = B.institution
      INNER JOIN active_fields       AS C ON A.field = C.field
    )
    WHERE pct_rank <= 0.1
    GROUP BY field,year
    ORDER BY field,year
  );
  ALTER TABLE `rt-era.demo.benchmarks_hpi_world_2`
  ALTER COLUMN field            SET OPTIONS (description="Field of Research (FoR) code (2-digits)"),
  ALTER COLUMN year             SET OPTIONS (description="Year of consideration (research outputs published in this year)"),
  ALTER COLUMN num_institutions SET OPTIONS (description="The number of high performing institutions that made it into the top 10%"),
  ALTER COLUMN sum_papers       SET OPTIONS (description="The number of papers published by the top 10% of institutions"),
  ALTER COLUMN sum_citations    SET OPTIONS (description="The total number of citations for outputs published by the top 10% of institutions"),
  ALTER COLUMN benchmark        SET OPTIONS (description="The average CPP (citations per paper) for the top 10% of institutions");
END;


-- generated by: benchmark_rci_papers.js
BEGIN
  -- assign RCI scores to each paper, against global CPP, local CPP and global HPI
  CREATE TABLE IF NOT EXISTS `rt-era.demo.rci_papers` AS (
    SELECT 
      A.doi,
      A.year_published AS year,
      F.code AS field,
      F.weight AS weight,
      IF(B.benchmark = 0 OR B.benchmark IS NULL, 0, A.num_citations / B.benchmark) AS rci_local,
      IF(C.benchmark = 0 OR C.benchmark IS NULL, 0, A.num_citations / C.benchmark) AS rci_world,
      IF(D.benchmark = 0 OR D.benchmark IS NULL, 0, A.num_citations / D.benchmark) AS hpi_world
    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(fors) AS F
    LEFT JOIN `rt-era.demo.benchmarks_cpp_local_4` AS B ON A.year_published = B.year AND F.code = B.code 
    LEFT JOIN `rt-era.demo.benchmarks_cpp_world_4` AS C ON A.year_published = C.year AND F.code = C.code 
    LEFT JOIN `rt-era.demo.benchmarks_hpi_world_4` AS D ON A.year_published = D.year AND F.code = D.field 
    ORDER BY doi,field
  );
END;

-- generated by: benchmark_rci.js
BEGIN
  -- creates a table with the upper boundary RCI value for dynamic RCI categories
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_rci_world_4` AS (
    WITH 
    cat0 AS (SELECT   field,   year,              0 AS upper FROM `rt-era.demo.rci_papers`                                                                   WHERE LENGTH(  field) >= 4                           GROUP BY field, year), -- 0 (uncited)
    cat1 AS (SELECT   field,   year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers`                                                                   WHERE LENGTH(  field) >= 4                           GROUP BY field, year), -- mean RCI > 0 (which should be 1.0)
  --cat1 AS (SELECT A.field, A.year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers` AS A LEFT JOIN cat0 AS B ON A.field = B.field AND A.year = B.year WHERE LENGTH(A.field) >= 4 AND A.rci_world > B.upper GROUP BY field, year), -- mean RCI > 0 (higher than 1.0 due to excluding 0s)
    cat2 AS (SELECT A.field, A.year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers` AS A LEFT JOIN cat1 AS B ON A.field = B.field AND A.year = B.year WHERE LENGTH(A.field) >= 4 AND A.rci_world > B.upper GROUP BY field, year), -- mean RCI > cat 1
    cat3 AS (SELECT A.field, A.year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers` AS A LEFT JOIN cat2 AS B ON A.field = B.field AND A.year = B.year WHERE LENGTH(A.field) >= 4 AND A.rci_world > B.upper GROUP BY field, year), -- mean RCI > cat 2
    cat4 AS (SELECT A.field, A.year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers` AS A LEFT JOIN cat3 AS B ON A.field = B.field AND A.year = B.year WHERE LENGTH(A.field) >= 4 AND A.rci_world > B.upper GROUP BY field, year), -- mean RCI > cat 3
    cat5 AS (SELECT   field,   year, MAX(rci_world) AS upper FROM `rt-era.demo.rci_papers`                                                                   WHERE LENGTH(  field) >= 4                           GROUP BY field, year)  -- maximum RCI
    SELECT
      cat0.field,
      cat0.year,
      cat5.upper AS max_rci,

      0.00 AS s_c0, -- uncited
      0.80 AS s_c1, -- the element is in category 1 if its RCI <= 0.8
      1.20 AS s_c2,
      2.00 AS s_c3,
      4.00 AS s_c4,
      8.00 AS s_c5,
      cat5.upper AS s_c6, -- technically this should be infinity (using max observed instead)

      cat0.upper AS d_c0, -- uncited
      cat1.upper AS d_c1, -- the element is in category 1 if its RCI <= dynamic_c1
      cat2.upper AS d_c2,
      cat3.upper AS d_c3,
      cat4.upper AS d_c4,
      cat5.upper AS d_c5  -- technically this should be infinity (using max observed instead)

    FROM cat0
    LEFT JOIN cat1 ON cat0.field = cat1.field AND cat0.year = cat1.year
    LEFT JOIN cat2 ON cat0.field = cat2.field AND cat0.year = cat2.year
    LEFT JOIN cat3 ON cat0.field = cat3.field AND cat0.year = cat3.year
    LEFT JOIN cat4 ON cat0.field = cat4.field AND cat0.year = cat4.year
    LEFT JOIN cat5 ON cat0.field = cat5.field AND cat0.year = cat5.year
    ORDER BY field,year
  );
END;


-- generated by: benchmark_rci.js
BEGIN
  -- creates a table with the upper boundary RCI value for dynamic RCI categories
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_rci_world_2` AS (
    WITH 
    cat0 AS (SELECT   field,   year,              0 AS upper FROM `rt-era.demo.rci_papers`                                                                   WHERE LENGTH(  field) >= 2                           GROUP BY field, year), -- 0 (uncited)
    cat1 AS (SELECT   field,   year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers`                                                                   WHERE LENGTH(  field) >= 2                           GROUP BY field, year), -- mean RCI > 0 (which should be 1.0)
  --cat1 AS (SELECT A.field, A.year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers` AS A LEFT JOIN cat0 AS B ON A.field = B.field AND A.year = B.year WHERE LENGTH(A.field) >= 2 AND A.rci_world > B.upper GROUP BY field, year), -- mean RCI > 0 (higher than 1.0 due to excluding 0s)
    cat2 AS (SELECT A.field, A.year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers` AS A LEFT JOIN cat1 AS B ON A.field = B.field AND A.year = B.year WHERE LENGTH(A.field) >= 2 AND A.rci_world > B.upper GROUP BY field, year), -- mean RCI > cat 1
    cat3 AS (SELECT A.field, A.year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers` AS A LEFT JOIN cat2 AS B ON A.field = B.field AND A.year = B.year WHERE LENGTH(A.field) >= 2 AND A.rci_world > B.upper GROUP BY field, year), -- mean RCI > cat 2
    cat4 AS (SELECT A.field, A.year, AVG(rci_world) AS upper FROM `rt-era.demo.rci_papers` AS A LEFT JOIN cat3 AS B ON A.field = B.field AND A.year = B.year WHERE LENGTH(A.field) >= 2 AND A.rci_world > B.upper GROUP BY field, year), -- mean RCI > cat 3
    cat5 AS (SELECT   field,   year, MAX(rci_world) AS upper FROM `rt-era.demo.rci_papers`                                                                   WHERE LENGTH(  field) >= 2                           GROUP BY field, year)  -- maximum RCI
    SELECT
      cat0.field,
      cat0.year,
      cat5.upper AS max_rci,

      0.00 AS s_c0, -- uncited
      0.80 AS s_c1, -- the element is in category 1 if its RCI <= 0.8
      1.20 AS s_c2,
      2.00 AS s_c3,
      4.00 AS s_c4,
      8.00 AS s_c5,
      cat5.upper AS s_c6, -- technically this should be infinity (using max observed instead)

      cat0.upper AS d_c0, -- uncited
      cat1.upper AS d_c1, -- the element is in category 1 if its RCI <= dynamic_c1
      cat2.upper AS d_c2,
      cat3.upper AS d_c3,
      cat4.upper AS d_c4,
      cat5.upper AS d_c5  -- technically this should be infinity (using max observed instead)

    FROM cat0
    LEFT JOIN cat1 ON cat0.field = cat1.field AND cat0.year = cat1.year
    LEFT JOIN cat2 ON cat0.field = cat2.field AND cat0.year = cat2.year
    LEFT JOIN cat3 ON cat0.field = cat3.field AND cat0.year = cat3.year
    LEFT JOIN cat4 ON cat0.field = cat4.field AND cat0.year = cat4.year
    LEFT JOIN cat5 ON cat0.field = cat5.field AND cat0.year = cat5.year
    ORDER BY field,year
  );
END;


-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,field,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_4_institution_field_year AS (
    SELECT 
      institution,field,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,field) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_4_institution_field AS (
    SELECT 
      institution,field,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,field
    ORDER BY institution,field
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_4_institution_year AS (
    SELECT 
      institution,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,year
    ORDER BY institution,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (field,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_4_field_year AS (
    SELECT 
      field,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY field,year
    ORDER BY field,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_4_institution AS (
    SELECT 
      institution,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution
    ORDER BY institution
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (field) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_4_field AS (
    SELECT 
      field,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY field
    ORDER BY field
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_4_year AS (
    SELECT 
      year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY year
    ORDER BY year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,field,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_2_institution_field_year AS (
    SELECT 
      institution,field,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,field) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_2_institution_field AS (
    SELECT 
      institution,field,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,field
    ORDER BY institution,field
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_2_institution_year AS (
    SELECT 
      institution,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,year
    ORDER BY institution,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (field,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_2_field_year AS (
    SELECT 
      field,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY field,year
    ORDER BY field,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_2_institution AS (
    SELECT 
      institution,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution
    ORDER BY institution
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (field) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_2_field AS (
    SELECT 
      field,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY field
    ORDER BY field
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_world_2_year AS (
    SELECT 
      year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY year
    ORDER BY year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,field,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_4_institution_field_year AS (
    SELECT 
      institution,field,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,field) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_4_institution_field AS (
    SELECT 
      institution,field,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,field
    ORDER BY institution,field
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_4_institution_year AS (
    SELECT 
      institution,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,year
    ORDER BY institution,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (field,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_4_field_year AS (
    SELECT 
      field,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY field,year
    ORDER BY field,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_4_institution AS (
    SELECT 
      institution,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution
    ORDER BY institution
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (field) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_4_field AS (
    SELECT 
      field,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY field
    ORDER BY field
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_4_year AS (
    SELECT 
      year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY year
    ORDER BY year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,field,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_2_institution_field_year AS (
    SELECT 
      institution,field,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,field,year
    ORDER BY institution,field,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,field) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_2_institution_field AS (
    SELECT 
      institution,field,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,field
    ORDER BY institution,field
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_2_institution_year AS (
    SELECT 
      institution,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution,year
    ORDER BY institution,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (field,year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_2_field_year AS (
    SELECT 
      field,year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY field,year
    ORDER BY field,year
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (institution) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_2_institution AS (
    SELECT 
      institution,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY institution
    ORDER BY institution
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (field) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_2_field AS (
    SELECT 
      field,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY field
    ORDER BY field
  );
END;

-- generated by: benchmark_rci_groups.js
BEGIN
  -- assign RCI scores to each (year) using apportionment and a weighted average
  CREATE TABLE IF NOT EXISTS rt-era.demo.rci_grouping_local_2_year AS (
    SELECT 
      year,
      IF (SUM(weight) = 0, 0, SUM(rci_local * weight) / SUM(weight)) AS rci_local,
      IF (SUM(weight) = 0, 0, SUM(rci_world * weight) / SUM(weight)) AS rci_world,
      IF (SUM(weight) = 0, 0, SUM(hpi_world * weight) / SUM(weight)) AS hpi_world
    FROM (
      SELECT 
        ror            AS institution,
        fc.code        AS field,
        fc.weight      AS weight,
        year_published AS year,
        B.rci_local    AS rci_local,
        B.rci_world    AS rci_world,
        B.hpi_world    AS hpi_world
      FROM `rt-era.demo.core_papers` AS A
      LEFT JOIN UNNEST(rors) AS ror
      LEFT JOIN UNNEST(fors) AS fc
      LEFT JOIN `rt-era.demo.rci_papers` AS B ON A.doi = B.doi AND fc.code = B.field
    )
    GROUP BY year
    ORDER BY year
  );
END;

-- generated by: benchmark_rci_classes.js
BEGIN 
  -- assign RCI classes to the papers
  CREATE TABLE IF NOT EXISTS `rt-era.demo.rci_classes_papers` AS (
    SELECT 
      doi,
      A.field,
      A.year,

      CASE
        WHEN rci_world > B.d_c4 THEN 5
        WHEN rci_world > B.d_c3 THEN 4
        WHEN rci_world > B.d_c2 THEN 3
        WHEN rci_world > B.d_c1 THEN 2
        WHEN rci_world > B.d_c0 THEN 1
        ELSE 0
      END AS rci_class_dynamic_world,

      CASE
        WHEN rci_world > B.s_c5 THEN 6
        WHEN rci_world > B.s_c4 THEN 5
        WHEN rci_world > B.s_c3 THEN 4
        WHEN rci_world > B.s_c2 THEN 3
        WHEN rci_world > B.s_c1 THEN 2
        WHEN rci_world > B.s_c0 THEN 1
        ELSE 0
      END AS rci_class_static_world,

      CASE
        WHEN rci_local > B.s_c5 THEN 6
        WHEN rci_local > B.s_c4 THEN 5
        WHEN rci_local > B.s_c3 THEN 4
        WHEN rci_local > B.s_c2 THEN 3
        WHEN rci_local > B.s_c1 THEN 2
        WHEN rci_local > B.s_c0 THEN 1
        ELSE 0
      END AS rci_class_static_local,

      CASE
        WHEN hpi_world > B.s_c5 THEN 6
        WHEN hpi_world > B.s_c4 THEN 5
        WHEN hpi_world > B.s_c3 THEN 4
        WHEN hpi_world > B.s_c2 THEN 3
        WHEN hpi_world > B.s_c1 THEN 2
        WHEN hpi_world > B.s_c0 THEN 1
        ELSE 0
      END AS hpi_class_static_world

    FROM `rt-era.demo.rci_papers` AS A
    LEFT JOIN `rt-era.demo.benchmarks_rci_world_4` AS B ON A.field = B.field AND A.year = B.year
    ORDER BY field,year
  );

  -- assign static RCI classes to fields of research
  CREATE TABLE IF NOT EXISTS `rt-era.demo.rci_classes_fields` AS (
    SELECT
      A.institution,
      A.field,
      A.year,
      CASE
        WHEN rci_world > B.d_c4 THEN 5
        WHEN rci_world > B.d_c3 THEN 4
        WHEN rci_world > B.d_c2 THEN 3
        WHEN rci_world > B.d_c1 THEN 2
        WHEN rci_world > B.d_c0 THEN 1
        ELSE 0
      END AS rci_class_dynamic_world,

      CASE
        WHEN rci_world > B.s_c5 THEN 6
        WHEN rci_world > B.s_c4 THEN 5
        WHEN rci_world > B.s_c3 THEN 4
        WHEN rci_world > B.s_c2 THEN 3
        WHEN rci_world > B.s_c1 THEN 2
        WHEN rci_world > B.s_c0 THEN 1
        ELSE 0
      END AS rci_class_static_world,

      CASE
        WHEN rci_local > B.s_c5 THEN 6
        WHEN rci_local > B.s_c4 THEN 5
        WHEN rci_local > B.s_c3 THEN 4
        WHEN rci_local > B.s_c2 THEN 3
        WHEN rci_local > B.s_c1 THEN 2
        WHEN rci_local > B.s_c0 THEN 1
        ELSE 0
      END AS rci_class_static_local,

      CASE
        WHEN hpi_world > B.s_c5 THEN 6
        WHEN hpi_world > B.s_c4 THEN 5
        WHEN hpi_world > B.s_c3 THEN 4
        WHEN hpi_world > B.s_c2 THEN 3
        WHEN hpi_world > B.s_c1 THEN 2
        WHEN hpi_world > B.s_c0 THEN 1
        ELSE 0
      END AS hpi_class_static_world
    FROM `rt-era.demo.rci_grouping_world_4_institution_field_year` AS A
    LEFT JOIN `rt-era.demo.benchmarks_rci_world_4` AS B ON A.field = B.field AND A.year = B.year
  );

  -- generate a summary table for the static method
  -- TODO: use weighted average apportionment to calculate a single RCI for a paper
  CREATE TABLE IF NOT EXISTS `rt-era.demo.rci_classes_summary` AS (
    SELECT 
      I AS institution,
      F.code AS field,
      COUNTIF(rci_class_static_world = 0) AS total_0,
      COUNTIF(rci_class_static_world = 1) AS total_1,
      COUNTIF(rci_class_static_world = 2) AS total_2,
      COUNTIF(rci_class_static_world = 3) AS total_3,
      COUNTIF(rci_class_static_world = 4) AS total_4,
      COUNTIF(rci_class_static_world = 5) AS total_5,
      COUNTIF(rci_class_static_world = 6) AS total_6,
      ROUND(SUM(IF(rci_class_static_world  = 0, F.weight, 0)),2) AS portions_0,
      ROUND(SUM(IF(rci_class_static_world  = 1, F.weight, 0)),2) AS portions_1,
      ROUND(SUM(IF(rci_class_static_world  = 2, F.weight, 0)),2) AS portions_2,
      ROUND(SUM(IF(rci_class_static_world  = 3, F.weight, 0)),2) AS portions_3,
      ROUND(SUM(IF(rci_class_static_world  = 4, F.weight, 0)),2) AS portions_4,
      ROUND(SUM(IF(rci_class_static_world  = 5, F.weight, 0)),2) AS portions_5,
      ROUND(SUM(IF(rci_class_static_world  = 6, F.weight, 0)),2) AS portions_6,

      COUNTIF(rci_class_static_world <= 1) AS rci_low , -- tally of papers in classes 0,1 using FoR fractions
      COUNTIF(rci_class_static_world >= 4) AS rci_high, -- tally of papers in classes 4,5,6 using FoR fractions
      0.0                                  AS rci_ratio -- ratio of rci_high to rci_low

      --hep_for_avg  , -- the percentage of papers (from all HEPs) in this class
      --hep_for_pct  , -- the percentage of papers (from the HEP) of all HEPs' papers in this class
    FROM `rt-era.demo.core_papers` AS A
    INNER JOIN UNNEST(heps) AS I
    INNER JOIN UNNEST(fors) AS F
    LEFT JOIN `rt-era.demo.rci_classes_papers` AS B ON A.doi = B.doi
    GROUP BY institution,field
    ORDER BY institution,field
  );
  UPDATE `rt-era.demo.rci_classes_summary` SET rci_ratio = IF(rci_low=0, rci_high, rci_high / rci_low) WHERE true;
END;

-- generated by: benchmark_summary.js
BEGIN
  -- the summary table brings together all class thresholds and benchmarks
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_summary_4` AS (
    SELECT 
      A.code                 AS field,
      F.name                 AS name, 
      A.year                 AS year,
      A.num_papers           AS num_papers,
      A.num_uncited          AS num_uncited,
      ROUND(A.benchmark , 4) AS cpp_local,
      ROUND(B.benchmark , 4) AS cpp_world,
      ROUND(C.benchmark , 4) AS cpp_hpi,
      ROUND(D.c1        , 4) AS ctile_01,
      ROUND(D.c5        , 4) AS ctile_05,
      ROUND(D.c10       , 4) AS ctile_10,
      ROUND(D.c25       , 4) AS ctile_25,
      ROUND(D.c50       , 4) AS ctile_50,
      ROUND(E.d_c0      , 4) AS dynamic_c0,
      ROUND(E.d_c1      , 4) AS dynamic_c1,
      ROUND(E.d_c2      , 4) AS dynamic_c2,
      ROUND(E.d_c3      , 4) AS dynamic_c3,
      ROUND(E.d_c4      , 4) AS dynamic_c4,
      'INF'                  AS dynamic_c5,
      --ROUND(E.d_c5      , 4) AS dynamic_c5,
      E.max_rci              AS maximum_rci,
      ROUND(E.s_c0      , 4) AS static_c0,
      ROUND(E.s_c1      , 4) AS static_c1,
      ROUND(E.s_c2      , 4) AS static_c2,
      ROUND(E.s_c3      , 4) AS static_c3,
      ROUND(E.s_c4      , 4) AS static_c4,
      ROUND(E.s_c5      , 4) AS static_c5,
      'INF'                  AS static_c6
      --ROUND(E.s_c6      , 4) AS static_c6
    FROM      `rt-era.demo.benchmarks_cpp_local_4`      AS A
    LEFT JOIN `rt-era.demo.benchmarks_cpp_world_4`      AS B ON A.code = B.code  AND A.year = B.year
    LEFT JOIN `rt-era.demo.benchmarks_hpi_world_4`      AS C ON A.code = C.field AND A.year = C.year
    LEFT JOIN `rt-era.demo.benchmarks_centiles_world_4` AS D ON A.code = D.field AND A.year = D.year
    LEFT JOIN `rt-era.demo.benchmarks_rci_world_4`      AS E ON A.code = E.field AND A.year = E.year
    LEFT JOIN `rt-era.demo.core_fors` AS F ON a.code = F.code
    ORDER BY field,year
  );
  ALTER TABLE `rt-era.demo.benchmarks_summary_4` SET OPTIONS(description='Aggregation of all benchmark and class boundary values by field of research and year');
  ALTER TABLE rt-era.demo.benchmarks_summary_4
  ALTER COLUMN field       SET OPTIONS (description="ANZSIC field of research code"),
  ALTER COLUMN name        SET OPTIONS (description="ANZSIC field of research name"),
  ALTER COLUMN year        SET OPTIONS (description="assessment year (publication year for papers)"),
  ALTER COLUMN num_papers  SET OPTIONS (description="total number of papers published in the year"),
  ALTER COLUMN num_uncited SET OPTIONS (description="number of papers that have no citations"),
  ALTER COLUMN cpp_local   SET OPTIONS (description="benchmark citations per paper for Australian HEPs only"),
  ALTER COLUMN cpp_world   SET OPTIONS (description="benchmark citations per paper for all institutions"),
  ALTER COLUMN cpp_hpi     SET OPTIONS (description="benchmark citations per paper for high performing global insitutions (avg of the top 10%)"),
  ALTER COLUMN ctile_01    SET OPTIONS (description="citations needed to be in the top 1% globally"),
  ALTER COLUMN ctile_05    SET OPTIONS (description="citations needed to be in the top 5% globally"),
  ALTER COLUMN ctile_10    SET OPTIONS (description="citations needed to be in the top 10% globally"),
  ALTER COLUMN ctile_25    SET OPTIONS (description="citations needed to be in the top 25% globally"),
  ALTER COLUMN ctile_50    SET OPTIONS (description="citations needed to be in the top 50% globally"),
  ALTER COLUMN dynamic_c0  SET OPTIONS (description="RCI score upper limit for category 0 (dynamic method)"),
  ALTER COLUMN dynamic_c1  SET OPTIONS (description="RCI score upper limit for category 1 (dynamic method)"),
  ALTER COLUMN dynamic_c2  SET OPTIONS (description="RCI score upper limit for category 2 (dynamic method)"),
  ALTER COLUMN dynamic_c3  SET OPTIONS (description="RCI score upper limit for category 3 (dynamic method)"),
  ALTER COLUMN dynamic_c4  SET OPTIONS (description="RCI score upper limit for category 4 (dynamic method)"),
  ALTER COLUMN dynamic_c5  SET OPTIONS (description="RCI score upper limit for category 5 (dynamic method)"),
  ALTER COLUMN maximum_rci SET OPTIONS (description="The maximum observed RCI score (technically the precise upper limit for dynamic_c5)"),
  ALTER COLUMN static_c0   SET OPTIONS (description="RCI score upper limit for category 0 (static)"),
  ALTER COLUMN static_c1   SET OPTIONS (description="RCI score upper limit for category 1 (static)"),
  ALTER COLUMN static_c2   SET OPTIONS (description="RCI score upper limit for category 2 (static)"),
  ALTER COLUMN static_c3   SET OPTIONS (description="RCI score upper limit for category 3 (static)"),
  ALTER COLUMN static_c4   SET OPTIONS (description="RCI score upper limit for category 4 (static)"),
  ALTER COLUMN static_c5   SET OPTIONS (description="RCI score upper limit for category 5 (static)"),
  ALTER COLUMN static_c6   SET OPTIONS (description="RCI score upper limit for category 6 (static)");
END;


-- generated by: benchmark_summary.js
BEGIN
  -- the summary table brings together all class thresholds and benchmarks
  CREATE TABLE IF NOT EXISTS `rt-era.demo.benchmarks_summary_2` AS (
    SELECT 
      A.code                 AS field,
      F.name                 AS name, 
      A.year                 AS year,
      A.num_papers           AS num_papers,
      A.num_uncited          AS num_uncited,
      ROUND(A.benchmark , 4) AS cpp_local,
      ROUND(B.benchmark , 4) AS cpp_world,
      ROUND(C.benchmark , 4) AS cpp_hpi,
      ROUND(D.c1        , 4) AS ctile_01,
      ROUND(D.c5        , 4) AS ctile_05,
      ROUND(D.c10       , 4) AS ctile_10,
      ROUND(D.c25       , 4) AS ctile_25,
      ROUND(D.c50       , 4) AS ctile_50,
      ROUND(E.d_c0      , 4) AS dynamic_c0,
      ROUND(E.d_c1      , 4) AS dynamic_c1,
      ROUND(E.d_c2      , 4) AS dynamic_c2,
      ROUND(E.d_c3      , 4) AS dynamic_c3,
      ROUND(E.d_c4      , 4) AS dynamic_c4,
      'INF'                  AS dynamic_c5,
      --ROUND(E.d_c5      , 4) AS dynamic_c5,
      E.max_rci              AS maximum_rci,
      ROUND(E.s_c0      , 4) AS static_c0,
      ROUND(E.s_c1      , 4) AS static_c1,
      ROUND(E.s_c2      , 4) AS static_c2,
      ROUND(E.s_c3      , 4) AS static_c3,
      ROUND(E.s_c4      , 4) AS static_c4,
      ROUND(E.s_c5      , 4) AS static_c5,
      'INF'                  AS static_c6
      --ROUND(E.s_c6      , 4) AS static_c6
    FROM      `rt-era.demo.benchmarks_cpp_local_2`      AS A
    LEFT JOIN `rt-era.demo.benchmarks_cpp_world_2`      AS B ON A.code = B.code  AND A.year = B.year
    LEFT JOIN `rt-era.demo.benchmarks_hpi_world_2`      AS C ON A.code = C.field AND A.year = C.year
    LEFT JOIN `rt-era.demo.benchmarks_centiles_world_2` AS D ON A.code = D.field AND A.year = D.year
    LEFT JOIN `rt-era.demo.benchmarks_rci_world_2`      AS E ON A.code = E.field AND A.year = E.year
    LEFT JOIN `rt-era.demo.core_fors` AS F ON a.code = F.code
    ORDER BY field,year
  );
  ALTER TABLE `rt-era.demo.benchmarks_summary_2` SET OPTIONS(description='Aggregation of all benchmark and class boundary values by field of research and year');
  ALTER TABLE rt-era.demo.benchmarks_summary_2
  ALTER COLUMN field       SET OPTIONS (description="ANZSIC field of research code"),
  ALTER COLUMN name        SET OPTIONS (description="ANZSIC field of research name"),
  ALTER COLUMN year        SET OPTIONS (description="assessment year (publication year for papers)"),
  ALTER COLUMN num_papers  SET OPTIONS (description="total number of papers published in the year"),
  ALTER COLUMN num_uncited SET OPTIONS (description="number of papers that have no citations"),
  ALTER COLUMN cpp_local   SET OPTIONS (description="benchmark citations per paper for Australian HEPs only"),
  ALTER COLUMN cpp_world   SET OPTIONS (description="benchmark citations per paper for all institutions"),
  ALTER COLUMN cpp_hpi     SET OPTIONS (description="benchmark citations per paper for high performing global insitutions (avg of the top 10%)"),
  ALTER COLUMN ctile_01    SET OPTIONS (description="citations needed to be in the top 1% globally"),
  ALTER COLUMN ctile_05    SET OPTIONS (description="citations needed to be in the top 5% globally"),
  ALTER COLUMN ctile_10    SET OPTIONS (description="citations needed to be in the top 10% globally"),
  ALTER COLUMN ctile_25    SET OPTIONS (description="citations needed to be in the top 25% globally"),
  ALTER COLUMN ctile_50    SET OPTIONS (description="citations needed to be in the top 50% globally"),
  ALTER COLUMN dynamic_c0  SET OPTIONS (description="RCI score upper limit for category 0 (dynamic method)"),
  ALTER COLUMN dynamic_c1  SET OPTIONS (description="RCI score upper limit for category 1 (dynamic method)"),
  ALTER COLUMN dynamic_c2  SET OPTIONS (description="RCI score upper limit for category 2 (dynamic method)"),
  ALTER COLUMN dynamic_c3  SET OPTIONS (description="RCI score upper limit for category 3 (dynamic method)"),
  ALTER COLUMN dynamic_c4  SET OPTIONS (description="RCI score upper limit for category 4 (dynamic method)"),
  ALTER COLUMN dynamic_c5  SET OPTIONS (description="RCI score upper limit for category 5 (dynamic method)"),
  ALTER COLUMN maximum_rci SET OPTIONS (description="The maximum observed RCI score (technically the precise upper limit for dynamic_c5)"),
  ALTER COLUMN static_c0   SET OPTIONS (description="RCI score upper limit for category 0 (static)"),
  ALTER COLUMN static_c1   SET OPTIONS (description="RCI score upper limit for category 1 (static)"),
  ALTER COLUMN static_c2   SET OPTIONS (description="RCI score upper limit for category 2 (static)"),
  ALTER COLUMN static_c3   SET OPTIONS (description="RCI score upper limit for category 3 (static)"),
  ALTER COLUMN static_c4   SET OPTIONS (description="RCI score upper limit for category 4 (static)"),
  ALTER COLUMN static_c5   SET OPTIONS (description="RCI score upper limit for category 5 (static)"),
  ALTER COLUMN static_c6   SET OPTIONS (description="RCI score upper limit for category 6 (static)");
END;


-------------------------------------------------------------------------------
-- WARNING: these queries are machine-generated. Any changes that you make   --
-- here will be overwritten on the next compilation. If a permanent query    --
-- alteration is required then modify the files in /code/queries/            --
-------------------------------------------------------------------------------
-- generated by: compile_indicators.js
CREATE SCHEMA IF NOT EXISTS `rt-era.demo`;


-- generated by: ind_low_volume.js
BEGIN
  CREATE TABLE IF NOT EXISTS `rt-era.demo.ind_ok_volume_world_4` AS (
    SELECT institution, field, sum_papers
    FROM rt-era.demo.research_outputs_world_4_institution_field
    WHERE sum_papers >= 50
  );
END;

-- generated by: ind_low_volume.js
BEGIN
  CREATE TABLE IF NOT EXISTS `rt-era.demo.ind_ok_volume_world_2` AS (
    SELECT institution, field, sum_papers
    FROM rt-era.demo.research_outputs_world_2_institution_field
    WHERE sum_papers >= 50
  );
END;

-- generated by: ind_low_volume.js
BEGIN
  CREATE TABLE IF NOT EXISTS `rt-era.demo.ind_ok_volume_local_4` AS (
    SELECT institution, field, sum_papers
    FROM rt-era.demo.research_outputs_local_4_institution_field
    WHERE sum_papers >= 50
  );
END;

-- generated by: ind_low_volume.js
BEGIN
  CREATE TABLE IF NOT EXISTS `rt-era.demo.ind_ok_volume_local_2` AS (
    SELECT institution, field, sum_papers
    FROM rt-era.demo.research_outputs_local_2_institution_field
    WHERE sum_papers >= 50
  );
END;

-- generated by: ind_interdisc.js
BEGIN
  CREATE TABLE IF NOT EXISTS `rt-era.demo.interdisc_world_4` AS (
    WITH 
    codes AS (
      SELECT 
        A.doi,
        SUBSTRING(B.code,0,4) AS code,
        B.weight AS weight,
        C.name
      FROM `rt-era.demo.core_papers` AS A 
      LEFT JOIN UNNEST(fors) AS B
      LEFT JOIN `rt-era.demo.core_fors` AS C ON SUBSTRING(B.code,0,2) = C.code
      WHERE LENGTH(B.code) >= 4
    ),
    pairs AS (
      SELECT 
        A.doi,
        A.code AS code1,
        A.name AS name1,
        B.code AS code2,
        B.name AS name2,
        A.weight AS weight1,
        B.weight AS weight2
      FROM       codes AS A
      INNER JOIN codes AS B ON A.doi = B.doi AND A.code != B.code
    ),
    final AS (
      SELECT 
        code1, name1,
        code2, name2,
        COUNT(1) AS num,
        ROUND(SUM(weight2),2) AS weight
      FROM pairs AS A
      GROUP BY code1, name1, code2, name2
      ORDER BY code1, weight DESC
    )
    SELECT
      *,
      ROUND(100 * num / SUM(num) OVER (PARTITION BY code1),2) AS pct_num,
      ROUND(100 * weight / SUM(weight) OVER (PARTITION BY code1),2) AS pct_weight
    FROM final
    ORDER BY code1,weight DESC
  );
END;

-- generated by: ind_interdisc.js
BEGIN
  CREATE TABLE IF NOT EXISTS `rt-era.demo.interdisc_world_2` AS (
    WITH 
    codes AS (
      SELECT 
        A.doi,
        SUBSTRING(B.code,0,2) AS code,
        B.weight AS weight,
        C.name
      FROM `rt-era.demo.core_papers` AS A 
      LEFT JOIN UNNEST(fors) AS B
      LEFT JOIN `rt-era.demo.core_fors` AS C ON SUBSTRING(B.code,0,2) = C.code
      WHERE LENGTH(B.code) >= 2
    ),
    pairs AS (
      SELECT 
        A.doi,
        A.code AS code1,
        A.name AS name1,
        B.code AS code2,
        B.name AS name2,
        A.weight AS weight1,
        B.weight AS weight2
      FROM       codes AS A
      INNER JOIN codes AS B ON A.doi = B.doi AND A.code != B.code
    ),
    final AS (
      SELECT 
        code1, name1,
        code2, name2,
        COUNT(1) AS num,
        ROUND(SUM(weight2),2) AS weight
      FROM pairs AS A
      GROUP BY code1, name1, code2, name2
      ORDER BY code1, weight DESC
    )
    SELECT
      *,
      ROUND(100 * num / SUM(num) OVER (PARTITION BY code1),2) AS pct_num,
      ROUND(100 * weight / SUM(weight) OVER (PARTITION BY code1),2) AS pct_weight
    FROM final
    ORDER BY code1,weight DESC
  );
END;

-- generated by: ind_interdisc.js
BEGIN
  CREATE TABLE IF NOT EXISTS `rt-era.demo.interdisc_local_4` AS (
    WITH 
    codes AS (
      SELECT 
        A.doi,
        SUBSTRING(B.code,0,4) AS code,
        B.weight AS weight,
        C.name
      FROM `rt-era.demo.core_papers` AS A 
      LEFT JOIN UNNEST(fors) AS B
      LEFT JOIN `rt-era.demo.core_fors` AS C ON SUBSTRING(B.code,0,2) = C.code
      WHERE LENGTH(B.code) >= 4
    ),
    pairs AS (
      SELECT 
        A.doi,
        A.code AS code1,
        A.name AS name1,
        B.code AS code2,
        B.name AS name2,
        A.weight AS weight1,
        B.weight AS weight2
      FROM       codes AS A
      INNER JOIN codes AS B ON A.doi = B.doi AND A.code != B.code
    ),
    final AS (
      SELECT 
        code1, name1,
        code2, name2,
        COUNT(1) AS num,
        ROUND(SUM(weight2),2) AS weight
      FROM pairs AS A
      GROUP BY code1, name1, code2, name2
      ORDER BY code1, weight DESC
    )
    SELECT
      *,
      ROUND(100 * num / SUM(num) OVER (PARTITION BY code1),2) AS pct_num,
      ROUND(100 * weight / SUM(weight) OVER (PARTITION BY code1),2) AS pct_weight
    FROM final
    ORDER BY code1,weight DESC
  );
END;

-- generated by: ind_interdisc.js
BEGIN
  CREATE TABLE IF NOT EXISTS `rt-era.demo.interdisc_local_2` AS (
    WITH 
    codes AS (
      SELECT 
        A.doi,
        SUBSTRING(B.code,0,2) AS code,
        B.weight AS weight,
        C.name
      FROM `rt-era.demo.core_papers` AS A 
      LEFT JOIN UNNEST(fors) AS B
      LEFT JOIN `rt-era.demo.core_fors` AS C ON SUBSTRING(B.code,0,2) = C.code
      WHERE LENGTH(B.code) >= 2
    ),
    pairs AS (
      SELECT 
        A.doi,
        A.code AS code1,
        A.name AS name1,
        B.code AS code2,
        B.name AS name2,
        A.weight AS weight1,
        B.weight AS weight2
      FROM       codes AS A
      INNER JOIN codes AS B ON A.doi = B.doi AND A.code != B.code
    ),
    final AS (
      SELECT 
        code1, name1,
        code2, name2,
        COUNT(1) AS num,
        ROUND(SUM(weight2),2) AS weight
      FROM pairs AS A
      GROUP BY code1, name1, code2, name2
      ORDER BY code1, weight DESC
    )
    SELECT
      *,
      ROUND(100 * num / SUM(num) OVER (PARTITION BY code1),2) AS pct_num,
      ROUND(100 * weight / SUM(weight) OVER (PARTITION BY code1),2) AS pct_weight
    FROM final
    ORDER BY code1,weight DESC
  );
END;

-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 4digit (journal,field,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_4_journal_field_year AS (
    SELECT 
      journal,field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_world_4_journal_field_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 4digit (journal,field)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_4_journal_field AS (
    SELECT 
      journal,field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT field) AS num_fields FROM rt-era.demo.publishing_profile_world_4_journal_field;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 4digit (journal,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_4_journal_year AS (
    SELECT 
      journal,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_world_4_journal_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 4digit (field,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_4_field_year AS (
    SELECT 
      field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_world_4_field_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 4digit (journal)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_4_journal AS (
    SELECT 
      journal,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        null AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals FROM rt-era.demo.publishing_profile_world_4_journal;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 4digit (field)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_4_field AS (
    SELECT 
      field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields FROM rt-era.demo.publishing_profile_world_4_field;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 4digit (year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_4_year AS (
    SELECT 
      year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_world_4_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 2digit (journal,field,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_2_journal_field_year AS (
    SELECT 
      journal,field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_world_2_journal_field_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 2digit (journal,field)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_2_journal_field AS (
    SELECT 
      journal,field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT field) AS num_fields FROM rt-era.demo.publishing_profile_world_2_journal_field;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 2digit (journal,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_2_journal_year AS (
    SELECT 
      journal,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_world_2_journal_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 2digit (field,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_2_field_year AS (
    SELECT 
      field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_world_2_field_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 2digit (journal)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_2_journal AS (
    SELECT 
      journal,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        null AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals FROM rt-era.demo.publishing_profile_world_2_journal;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 2digit (field)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_2_field AS (
    SELECT 
      field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields FROM rt-era.demo.publishing_profile_world_2_field;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table world 2digit (year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_world_2_year AS (
    SELECT 
      year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_world_2_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 4digit (journal,field,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_4_journal_field_year AS (
    SELECT 
      journal,field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 AND is_hep
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_local_4_journal_field_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 4digit (journal,field)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_4_journal_field AS (
    SELECT 
      journal,field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 AND is_hep
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT field) AS num_fields FROM rt-era.demo.publishing_profile_local_4_journal_field;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 4digit (journal,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_4_journal_year AS (
    SELECT 
      journal,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 AND is_hep
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_local_4_journal_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 4digit (field,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_4_field_year AS (
    SELECT 
      field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 AND is_hep
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_local_4_field_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 4digit (journal)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_4_journal AS (
    SELECT 
      journal,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        null AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 AND is_hep
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals FROM rt-era.demo.publishing_profile_local_4_journal;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 4digit (field)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_4_field AS (
    SELECT 
      field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 AND is_hep
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields FROM rt-era.demo.publishing_profile_local_4_field;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 4digit (year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_4_year AS (
    SELECT 
      year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 4 AND is_hep
      --WHERE LENGTH(field) >= 4
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_local_4_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 2digit (journal,field,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_2_journal_field_year AS (
    SELECT 
      journal,field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 AND is_hep
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_local_2_journal_field_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 2digit (journal,field)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_2_journal_field AS (
    SELECT 
      journal,field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 AND is_hep
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT field) AS num_fields FROM rt-era.demo.publishing_profile_local_2_journal_field;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 2digit (journal,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_2_journal_year AS (
    SELECT 
      journal,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 AND is_hep
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_local_2_journal_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 2digit (field,year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_2_field_year AS (
    SELECT 
      field,year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        field AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 AND is_hep
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields,COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_local_2_field_year;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 2digit (journal)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_2_journal AS (
    SELECT 
      journal,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        journal AS journal,
        null AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 AND is_hep
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT journal) AS num_journals FROM rt-era.demo.publishing_profile_local_2_journal;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 2digit (field)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_2_field AS (
    SELECT 
      field,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        field AS field,
        null AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 AND is_hep
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT field) AS num_fields FROM rt-era.demo.publishing_profile_local_2_field;
END;


-- generated by: ind_publishing_profile.js
BEGIN
  -- create publishing profile table local 2digit (year)
  CREATE TABLE IF NOT EXISTS rt-era.demo.publishing_profile_local_2_year AS (
    SELECT 
      year,
      COUNT(1)  AS sum_papers,
      SUM(cits) AS sum_citations,
      SUM(frac) AS sum_portions,
      AVG(cits) AS avg_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS cent_papers,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS cent_citations,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS cent_portions,
      NTILE(100) OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS cent_cpp,
      RANK()     OVER (PARTITION BY field,year ORDER BY COUNT(1)  DESC) AS rank_papers,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(cits) DESC) AS rank_citations,
      RANK()     OVER (PARTITION BY field,year ORDER BY SUM(frac) DESC) AS rank_portions,
      RANK()     OVER (PARTITION BY field,year ORDER BY AVG(cits) DESC) AS rank_cpp
    FROM (
      SELECT 
        null AS journal,
        null AS field,
        year AS year, 
        ANY_VALUE(frac) AS frac, 
        ANY_VALUE(cits) AS cits
      FROM rt-era.demo.research_outputs_world_base
      WHERE LENGTH(field) >= 2 AND is_hep
      --WHERE LENGTH(field) >= 2
      GROUP BY paper,journal,field,year
    )
    -- this works because of the ternary operations in the internal select
    GROUP BY journal,field,year
    ORDER BY journal,field,year
  );

  -- sanity checks
  SELECT 'test', COUNT(1) AS total, COUNT(DISTINCT year) AS num_years FROM rt-era.demo.publishing_profile_local_2_year;
END;


-- generated by: ind_ratings.js
BEGIN
  /* currently inactivated
  CREATE TABLE IF NOT EXISTS `rt-era.demo.rci_scores_world_4` AS ( 
    WITH ror_for_year AS (
      SELECT 
        A.ror,
        B.vers,
        B.code,
        C.year_published   AS year,
        COUNT(1)           AS num_papers,
        SUM(B.weight)      AS sum_portions,
        SUM(num_citations) AS num_citations,
        ROUND(AVG(num_citations),4) AS avg_citations 
      FROM       `rt-era.demo.paper_x_hep`     AS A 
      INNER JOIN `rt-era.demo.forcode_x_paper` AS B ON A.doi = B.doi AND B.vers = 2020 AND LENGTH(code) = 4 -- filter for codes
      INNER JOIN `rt-era.demo.papers`          AS C ON A.doi = C.doi AND year_published BETWEEN 2000 AND 2022 -- filter time frame
      GROUP BY ror, vers, code, year 
      ORDER BY num_citations DESC
    ),

    -- generate aggregate stats across the time period for each (RoR,FoR). Needed for low-volume filtering
    -- FIXME: is paper deduplication required here?
    ror_for AS (
      SELECT 
        ror,
        vers,
        code,
        ROUND(SUM(sum_portions),4) AS sum_portions,
        SUM(sum_portions) < 50 AS low_volume,
        SUM(num_papers) AS num_papers,
        SUM(num_citations) AS num_citations,
        ROUND(SUM(num_citations) / SUM(num_papers),4) AS avg_citations
      FROM ror_for_year 
      GROUP BY ror,vers,code 
      ORDER BY sum_portions DESC
    ),

    -- filter the first table to exclude institutions that don't pass the volume threshold
    ror_for_year_rank AS (
      SELECT 
        A.ror,
        A.vers,
        A.code,
        A.year,
        A.num_papers,
        A.num_citations
      FROM ror_for_year  AS A
      INNER JOIN ror_for AS B ON A.ror = B.ror AND A.vers = B.vers AND A.code = B.code AND NOT B.low_volume
      ORDER BY vers, code, year, num_citations DESC
    ),

    -- bring in benchmark data
    with_benchmarks AS (
      SELECT 
        A.ror,
        B.name AS institution,
        A.vers,
        A.code,
        D.name AS field,
        A.year,
        ROUND(A.num_citations / A.num_papers,2) AS cpp,
        ROUND(C.cpp_benchmark,2) AS hpi_benchmark,
        ROUND(E.benchmark,2) AS rci_benchmark
      FROM ror_for_year_rank AS A
      LEFT JOIN `rt-era.demo.core_heps`            AS B ON A.ror  = B.ror
      LEFT JOIN `rt-era.demo.core_fors`            AS D ON A.vers = D.vers AND A.code = D.code
      LEFT JOIN `rt-era.demo.benchmarks_hpi`       AS C ON A.vers = C.vers AND A.code = C.code AND A.year = C.year 
      LEFT JOIN `rt-era.demo.rci_benchmarks_world` AS E ON A.vers = E.vers AND A.code = E.code AND A.year = E.year_published
    )
    SELECT 
      *,
      IF(cpp IS NULL OR hpi_benchmark IS NULL OR hpi_benchmark = 0, 0, ROUND(cpp / hpi_benchmark,2)) AS relative_hpi,
      IF(cpp IS NULL OR rci_benchmark IS NULL OR rci_benchmark = 0, 0, ROUND(cpp / rci_benchmark,2)) AS relative_rci
    FROM with_benchmarks
  );
  -- ALTER TABLE rt-era.demo.ind_ratings
  -- ALTER COLUMN ror
  -- ALTER COLUMN name
  -- ALTER COLUMN vers             SET OPTIONS (description="Field of Research (FoR) version year (either 2008 or 2020)"),
  -- ALTER COLUMN code             SET OPTIONS (description="Field of Research (FoR) code (2-digit or 4-digit)"),
  -- ALTER COLUMN year             SET OPTIONS (description="Year of consideration (research outputs published in this year)"),
  */

  -- assign ratings
  CREATE TABLE IF NOT EXISTS `rt-era.demo.ratings_world_4` AS (
    SELECT 
      institution,
      field,
      year,
      rci_world,
      CASE
        WHEN rci_world > 1.6 THEN '5 - well above world standard'
        WHEN rci_world > 1.2 THEN '4 - above world standard'
        WHEN rci_world > 0.8 THEN '3 - around world standard'
        WHEN rci_world > 0.4 THEN '2 - below world standard'
        WHEN rci_world > 0 THEN '1 - well below world standard'
        ELSE 'NA - not assessable'
      END AS rating_world,
      CASE
        WHEN hpi_world > 1.6 AND rci_world > 1.6 THEN '5 - world leading'
        WHEN hpi_world > 0.8 AND rci_world > 1.6 THEN '4 - well above world standard'
        WHEN hpi_world < 0.8 AND rci_world > 1.2 THEN '3 - above world standard' 
        WHEN rci_world > 0.8 THEN '2 - world standard'
        WHEN rci_world > 0 THEN '1 - not at world standard'
        ELSE 'NA - not assessable'
      END AS rating_option_a,
      CASE
        WHEN hpi_world > 1.6 THEN 'AAA - world leading'
        WHEN hpi_world > 1.2 THEN 'AA - above high performance standard'
        WHEN hpi_world > 0.8 THEN 'A - around high performance standard'
        WHEN rci_world > 1.2 THEN 'B - above world standard'
        WHEN rci_world > 0.8 THEN 'C - around world standard'
        WHEN rci_world > 0 THEN 'D - below world standard'
        ELSE 'NA - not assessable'
      END AS rating_option_b
    FROM rt-era.demo.rci_grouping_world_4_institution_field_year
    ORDER BY rci_world DESC 
  );
END;


-- generated by: ind_ratings.js
BEGIN
  /* currently inactivated
  CREATE TABLE IF NOT EXISTS `rt-era.demo.rci_scores_world_2` AS ( 
    WITH ror_for_year AS (
      SELECT 
        A.ror,
        B.vers,
        B.code,
        C.year_published   AS year,
        COUNT(1)           AS num_papers,
        SUM(B.weight)      AS sum_portions,
        SUM(num_citations) AS num_citations,
        ROUND(AVG(num_citations),4) AS avg_citations 
      FROM       `rt-era.demo.paper_x_hep`     AS A 
      INNER JOIN `rt-era.demo.forcode_x_paper` AS B ON A.doi = B.doi AND B.vers = 2020 AND LENGTH(code) = 2 -- filter for codes
      INNER JOIN `rt-era.demo.papers`          AS C ON A.doi = C.doi AND year_published BETWEEN 2000 AND 2022 -- filter time frame
      GROUP BY ror, vers, code, year 
      ORDER BY num_citations DESC
    ),

    -- generate aggregate stats across the time period for each (RoR,FoR). Needed for low-volume filtering
    -- FIXME: is paper deduplication required here?
    ror_for AS (
      SELECT 
        ror,
        vers,
        code,
        ROUND(SUM(sum_portions),4) AS sum_portions,
        SUM(sum_portions) < 50 AS low_volume,
        SUM(num_papers) AS num_papers,
        SUM(num_citations) AS num_citations,
        ROUND(SUM(num_citations) / SUM(num_papers),4) AS avg_citations
      FROM ror_for_year 
      GROUP BY ror,vers,code 
      ORDER BY sum_portions DESC
    ),

    -- filter the first table to exclude institutions that don't pass the volume threshold
    ror_for_year_rank AS (
      SELECT 
        A.ror,
        A.vers,
        A.code,
        A.year,
        A.num_papers,
        A.num_citations
      FROM ror_for_year  AS A
      INNER JOIN ror_for AS B ON A.ror = B.ror AND A.vers = B.vers AND A.code = B.code AND NOT B.low_volume
      ORDER BY vers, code, year, num_citations DESC
    ),

    -- bring in benchmark data
    with_benchmarks AS (
      SELECT 
        A.ror,
        B.name AS institution,
        A.vers,
        A.code,
        D.name AS field,
        A.year,
        ROUND(A.num_citations / A.num_papers,2) AS cpp,
        ROUND(C.cpp_benchmark,2) AS hpi_benchmark,
        ROUND(E.benchmark,2) AS rci_benchmark
      FROM ror_for_year_rank AS A
      LEFT JOIN `rt-era.demo.core_heps`            AS B ON A.ror  = B.ror
      LEFT JOIN `rt-era.demo.core_fors`            AS D ON A.vers = D.vers AND A.code = D.code
      LEFT JOIN `rt-era.demo.benchmarks_hpi`       AS C ON A.vers = C.vers AND A.code = C.code AND A.year = C.year 
      LEFT JOIN `rt-era.demo.rci_benchmarks_world` AS E ON A.vers = E.vers AND A.code = E.code AND A.year = E.year_published
    )
    SELECT 
      *,
      IF(cpp IS NULL OR hpi_benchmark IS NULL OR hpi_benchmark = 0, 0, ROUND(cpp / hpi_benchmark,2)) AS relative_hpi,
      IF(cpp IS NULL OR rci_benchmark IS NULL OR rci_benchmark = 0, 0, ROUND(cpp / rci_benchmark,2)) AS relative_rci
    FROM with_benchmarks
  );
  -- ALTER TABLE rt-era.demo.ind_ratings
  -- ALTER COLUMN ror
  -- ALTER COLUMN name
  -- ALTER COLUMN vers             SET OPTIONS (description="Field of Research (FoR) version year (either 2008 or 2020)"),
  -- ALTER COLUMN code             SET OPTIONS (description="Field of Research (FoR) code (2-digit or 4-digit)"),
  -- ALTER COLUMN year             SET OPTIONS (description="Year of consideration (research outputs published in this year)"),
  */

  -- assign ratings
  CREATE TABLE IF NOT EXISTS `rt-era.demo.ratings_world_2` AS (
    SELECT 
      institution,
      field,
      year,
      rci_world,
      CASE
        WHEN rci_world > 1.6 THEN '5 - well above world standard'
        WHEN rci_world > 1.2 THEN '4 - above world standard'
        WHEN rci_world > 0.8 THEN '3 - around world standard'
        WHEN rci_world > 0.4 THEN '2 - below world standard'
        WHEN rci_world > 0 THEN '1 - well below world standard'
        ELSE 'NA - not assessable'
      END AS rating_world,
      CASE
        WHEN hpi_world > 1.6 AND rci_world > 1.6 THEN '5 - world leading'
        WHEN hpi_world > 0.8 AND rci_world > 1.6 THEN '4 - well above world standard'
        WHEN hpi_world < 0.8 AND rci_world > 1.2 THEN '3 - above world standard' 
        WHEN rci_world > 0.8 THEN '2 - world standard'
        WHEN rci_world > 0 THEN '1 - not at world standard'
        ELSE 'NA - not assessable'
      END AS rating_option_a,
      CASE
        WHEN hpi_world > 1.6 THEN 'AAA - world leading'
        WHEN hpi_world > 1.2 THEN 'AA - above high performance standard'
        WHEN hpi_world > 0.8 THEN 'A - around high performance standard'
        WHEN rci_world > 1.2 THEN 'B - above world standard'
        WHEN rci_world > 0.8 THEN 'C - around world standard'
        WHEN rci_world > 0 THEN 'D - below world standard'
        ELSE 'NA - not assessable'
      END AS rating_option_b
    FROM rt-era.demo.rci_grouping_world_2_institution_field_year
    ORDER BY rci_world DESC 
  );
END;


-- generated by: ind_ratings.js
BEGIN
  /* currently inactivated
  CREATE TABLE IF NOT EXISTS `rt-era.demo.rci_scores_local_4` AS ( 
    WITH ror_for_year AS (
      SELECT 
        A.ror,
        B.vers,
        B.code,
        C.year_published   AS year,
        COUNT(1)           AS num_papers,
        SUM(B.weight)      AS sum_portions,
        SUM(num_citations) AS num_citations,
        ROUND(AVG(num_citations),4) AS avg_citations 
      FROM       `rt-era.demo.paper_x_hep`     AS A 
      INNER JOIN `rt-era.demo.forcode_x_paper` AS B ON A.doi = B.doi AND B.vers = 2020 AND LENGTH(code) = 4 -- filter for codes
      INNER JOIN `rt-era.demo.papers`          AS C ON A.doi = C.doi AND year_published BETWEEN 2000 AND 2022 -- filter time frame
      GROUP BY ror, vers, code, year 
      ORDER BY num_citations DESC
    ),

    -- generate aggregate stats across the time period for each (RoR,FoR). Needed for low-volume filtering
    -- FIXME: is paper deduplication required here?
    ror_for AS (
      SELECT 
        ror,
        vers,
        code,
        ROUND(SUM(sum_portions),4) AS sum_portions,
        SUM(sum_portions) < 50 AS low_volume,
        SUM(num_papers) AS num_papers,
        SUM(num_citations) AS num_citations,
        ROUND(SUM(num_citations) / SUM(num_papers),4) AS avg_citations
      FROM ror_for_year 
      GROUP BY ror,vers,code 
      ORDER BY sum_portions DESC
    ),

    -- filter the first table to exclude institutions that don't pass the volume threshold
    ror_for_year_rank AS (
      SELECT 
        A.ror,
        A.vers,
        A.code,
        A.year,
        A.num_papers,
        A.num_citations
      FROM ror_for_year  AS A
      INNER JOIN ror_for AS B ON A.ror = B.ror AND A.vers = B.vers AND A.code = B.code AND NOT B.low_volume
      ORDER BY vers, code, year, num_citations DESC
    ),

    -- bring in benchmark data
    with_benchmarks AS (
      SELECT 
        A.ror,
        B.name AS institution,
        A.vers,
        A.code,
        D.name AS field,
        A.year,
        ROUND(A.num_citations / A.num_papers,2) AS cpp,
        ROUND(C.cpp_benchmark,2) AS hpi_benchmark,
        ROUND(E.benchmark,2) AS rci_benchmark
      FROM ror_for_year_rank AS A
      LEFT JOIN `rt-era.demo.core_heps`            AS B ON A.ror  = B.ror
      LEFT JOIN `rt-era.demo.core_fors`            AS D ON A.vers = D.vers AND A.code = D.code
      LEFT JOIN `rt-era.demo.benchmarks_hpi`       AS C ON A.vers = C.vers AND A.code = C.code AND A.year = C.year 
      LEFT JOIN `rt-era.demo.rci_benchmarks_world` AS E ON A.vers = E.vers AND A.code = E.code AND A.year = E.year_published
    )
    SELECT 
      *,
      IF(cpp IS NULL OR hpi_benchmark IS NULL OR hpi_benchmark = 0, 0, ROUND(cpp / hpi_benchmark,2)) AS relative_hpi,
      IF(cpp IS NULL OR rci_benchmark IS NULL OR rci_benchmark = 0, 0, ROUND(cpp / rci_benchmark,2)) AS relative_rci
    FROM with_benchmarks
  );
  -- ALTER TABLE rt-era.demo.ind_ratings
  -- ALTER COLUMN ror
  -- ALTER COLUMN name
  -- ALTER COLUMN vers             SET OPTIONS (description="Field of Research (FoR) version year (either 2008 or 2020)"),
  -- ALTER COLUMN code             SET OPTIONS (description="Field of Research (FoR) code (2-digit or 4-digit)"),
  -- ALTER COLUMN year             SET OPTIONS (description="Year of consideration (research outputs published in this year)"),
  */

  -- assign ratings
  CREATE TABLE IF NOT EXISTS `rt-era.demo.ratings_local_4` AS (
    SELECT 
      institution,
      field,
      year,
      rci_world,
      CASE
        WHEN rci_world > 1.6 THEN '5 - well above world standard'
        WHEN rci_world > 1.2 THEN '4 - above world standard'
        WHEN rci_world > 0.8 THEN '3 - around world standard'
        WHEN rci_world > 0.4 THEN '2 - below world standard'
        WHEN rci_world > 0 THEN '1 - well below world standard'
        ELSE 'NA - not assessable'
      END AS rating_world,
      CASE
        WHEN hpi_world > 1.6 AND rci_world > 1.6 THEN '5 - world leading'
        WHEN hpi_world > 0.8 AND rci_world > 1.6 THEN '4 - well above world standard'
        WHEN hpi_world < 0.8 AND rci_world > 1.2 THEN '3 - above world standard' 
        WHEN rci_world > 0.8 THEN '2 - world standard'
        WHEN rci_world > 0 THEN '1 - not at world standard'
        ELSE 'NA - not assessable'
      END AS rating_option_a,
      CASE
        WHEN hpi_world > 1.6 THEN 'AAA - world leading'
        WHEN hpi_world > 1.2 THEN 'AA - above high performance standard'
        WHEN hpi_world > 0.8 THEN 'A - around high performance standard'
        WHEN rci_world > 1.2 THEN 'B - above world standard'
        WHEN rci_world > 0.8 THEN 'C - around world standard'
        WHEN rci_world > 0 THEN 'D - below world standard'
        ELSE 'NA - not assessable'
      END AS rating_option_b
    FROM rt-era.demo.rci_grouping_local_4_institution_field_year
    ORDER BY rci_world DESC 
  );
END;


-- generated by: ind_ratings.js
BEGIN
  /* currently inactivated
  CREATE TABLE IF NOT EXISTS `rt-era.demo.rci_scores_local_2` AS ( 
    WITH ror_for_year AS (
      SELECT 
        A.ror,
        B.vers,
        B.code,
        C.year_published   AS year,
        COUNT(1)           AS num_papers,
        SUM(B.weight)      AS sum_portions,
        SUM(num_citations) AS num_citations,
        ROUND(AVG(num_citations),4) AS avg_citations 
      FROM       `rt-era.demo.paper_x_hep`     AS A 
      INNER JOIN `rt-era.demo.forcode_x_paper` AS B ON A.doi = B.doi AND B.vers = 2020 AND LENGTH(code) = 2 -- filter for codes
      INNER JOIN `rt-era.demo.papers`          AS C ON A.doi = C.doi AND year_published BETWEEN 2000 AND 2022 -- filter time frame
      GROUP BY ror, vers, code, year 
      ORDER BY num_citations DESC
    ),

    -- generate aggregate stats across the time period for each (RoR,FoR). Needed for low-volume filtering
    -- FIXME: is paper deduplication required here?
    ror_for AS (
      SELECT 
        ror,
        vers,
        code,
        ROUND(SUM(sum_portions),4) AS sum_portions,
        SUM(sum_portions) < 50 AS low_volume,
        SUM(num_papers) AS num_papers,
        SUM(num_citations) AS num_citations,
        ROUND(SUM(num_citations) / SUM(num_papers),4) AS avg_citations
      FROM ror_for_year 
      GROUP BY ror,vers,code 
      ORDER BY sum_portions DESC
    ),

    -- filter the first table to exclude institutions that don't pass the volume threshold
    ror_for_year_rank AS (
      SELECT 
        A.ror,
        A.vers,
        A.code,
        A.year,
        A.num_papers,
        A.num_citations
      FROM ror_for_year  AS A
      INNER JOIN ror_for AS B ON A.ror = B.ror AND A.vers = B.vers AND A.code = B.code AND NOT B.low_volume
      ORDER BY vers, code, year, num_citations DESC
    ),

    -- bring in benchmark data
    with_benchmarks AS (
      SELECT 
        A.ror,
        B.name AS institution,
        A.vers,
        A.code,
        D.name AS field,
        A.year,
        ROUND(A.num_citations / A.num_papers,2) AS cpp,
        ROUND(C.cpp_benchmark,2) AS hpi_benchmark,
        ROUND(E.benchmark,2) AS rci_benchmark
      FROM ror_for_year_rank AS A
      LEFT JOIN `rt-era.demo.core_heps`            AS B ON A.ror  = B.ror
      LEFT JOIN `rt-era.demo.core_fors`            AS D ON A.vers = D.vers AND A.code = D.code
      LEFT JOIN `rt-era.demo.benchmarks_hpi`       AS C ON A.vers = C.vers AND A.code = C.code AND A.year = C.year 
      LEFT JOIN `rt-era.demo.rci_benchmarks_world` AS E ON A.vers = E.vers AND A.code = E.code AND A.year = E.year_published
    )
    SELECT 
      *,
      IF(cpp IS NULL OR hpi_benchmark IS NULL OR hpi_benchmark = 0, 0, ROUND(cpp / hpi_benchmark,2)) AS relative_hpi,
      IF(cpp IS NULL OR rci_benchmark IS NULL OR rci_benchmark = 0, 0, ROUND(cpp / rci_benchmark,2)) AS relative_rci
    FROM with_benchmarks
  );
  -- ALTER TABLE rt-era.demo.ind_ratings
  -- ALTER COLUMN ror
  -- ALTER COLUMN name
  -- ALTER COLUMN vers             SET OPTIONS (description="Field of Research (FoR) version year (either 2008 or 2020)"),
  -- ALTER COLUMN code             SET OPTIONS (description="Field of Research (FoR) code (2-digit or 4-digit)"),
  -- ALTER COLUMN year             SET OPTIONS (description="Year of consideration (research outputs published in this year)"),
  */

  -- assign ratings
  CREATE TABLE IF NOT EXISTS `rt-era.demo.ratings_local_2` AS (
    SELECT 
      institution,
      field,
      year,
      rci_world,
      CASE
        WHEN rci_world > 1.6 THEN '5 - well above world standard'
        WHEN rci_world > 1.2 THEN '4 - above world standard'
        WHEN rci_world > 0.8 THEN '3 - around world standard'
        WHEN rci_world > 0.4 THEN '2 - below world standard'
        WHEN rci_world > 0 THEN '1 - well below world standard'
        ELSE 'NA - not assessable'
      END AS rating_world,
      CASE
        WHEN hpi_world > 1.6 AND rci_world > 1.6 THEN '5 - world leading'
        WHEN hpi_world > 0.8 AND rci_world > 1.6 THEN '4 - well above world standard'
        WHEN hpi_world < 0.8 AND rci_world > 1.2 THEN '3 - above world standard' 
        WHEN rci_world > 0.8 THEN '2 - world standard'
        WHEN rci_world > 0 THEN '1 - not at world standard'
        ELSE 'NA - not assessable'
      END AS rating_option_a,
      CASE
        WHEN hpi_world > 1.6 THEN 'AAA - world leading'
        WHEN hpi_world > 1.2 THEN 'AA - above high performance standard'
        WHEN hpi_world > 0.8 THEN 'A - around high performance standard'
        WHEN rci_world > 1.2 THEN 'B - above world standard'
        WHEN rci_world > 0.8 THEN 'C - around world standard'
        WHEN rci_world > 0 THEN 'D - below world standard'
        ELSE 'NA - not assessable'
      END AS rating_option_b
    FROM rt-era.demo.rci_grouping_local_2_institution_field_year
    ORDER BY rci_world DESC 
  );
END;


-------------------------------------------------------------------------------
-- WARNING: these queries are machine-generated. Any changes that you make   --
-- here will be overwritten on the next compilation. If a permanent query    --
-- alteration is required then modify the files in /code/queries/            --
-------------------------------------------------------------------------------
-- generated by: analyse_institution.js
CREATE SCHEMA IF NOT EXISTS `rt-era.demo`;


-- generated by: report_institution.js
BEGIN

  CREATE SCHEMA IF NOT EXISTS `rt-era.demo_inst` OPTIONS (
    description = 'single institution analysis for inst'
  );

  --
  -- Using the era core_papers table, build a list of journal outputs
  --
  -- Institutionally affiliated publications, drawn directly from the pre-determined core_papers
  CREATE TABLE IF NOT EXISTS `rt-era.demo_inst.inst_papers` AS (
    SELECT 
      A.doi             AS paper_doi,
      --A.title           AS paper_title,
      A.era_id          AS journal_era_id, 
      B.title           AS journal_title,
      A.year_published  AS year, 
      A.num_citations   AS citations, 
      --A.authors         AS authors,
      A.fors            AS field
    -- limited to whatever restrictions built the core table (eg ERA date range)
    FROM `rt-era.demo.core_papers` AS A
    LEFT JOIN UNNEST(rors) AS ror
    -- add journal title
    LEFT JOIN `rt-era.demo.core_journals` AS B ON A.era_id = B.era_id
    -- restrict to the single institution
    WHERE ror = 'https://ror.org/02n415q13' -- inst 
    -- AND B.era_round = '2023'
    ORDER BY year
  );
  ALTER TABLE `rt-era.demo_inst.inst_papers` SET OPTIONS(description='inst outputs that meet the basic criteria for ERA analysis');
  ALTER TABLE rt-era.demo_inst.inst_papers
  ALTER COLUMN paper_doi      SET OPTIONS (description="Digitial Object Identifier of the paper"),
  --ALTER COLUMN paper_title    SET OPTIONS (description="Title of the paper"),
  ALTER COLUMN journal_era_id SET OPTIONS (description="ERA Journal List ID of the encompassing journal"),
  ALTER COLUMN journal_title  SET OPTIONS (description="Journal Title (from the ERA Journal List)"),
  ALTER COLUMN year           SET OPTIONS (description="Year of publication"),
  ALTER COLUMN citations      SET OPTIONS (description="Current number of citations"),
  --ALTER COLUMN authors        SET OPTIONS (description="List of authors from Crossref"),
  ALTER COLUMN field          SET OPTIONS (description="ANZSIC field of research codes inherited from the journal");

  -- 
  -- Using the DOI table, filter for all inst outputs (based on RoR code) over all time. Two flag columns indicate if the output is in an ERA journal or is a journal article
  --
  CREATE TABLE IF NOT EXISTS `rt-era.demo_inst.inst_outputs` AS (
    WITH
    -- extract a list of papers that link to inst (via RoR)
    linked_by_ror AS (
      SELECT doi
      FROM `rt-era.demo.raw_papers` --TABLESAMPLE SYSTEM (0.01 PERCENT) 
      LEFT JOIN UNNEST(rors) AS ror
      WHERE ror = 'https://ror.org/02n415q13' -- inst
      GROUP BY doi
    ),
    -- extract a list of papers that link to an ERA journal
    linked_by_era AS (
      SELECT doi
      FROM `rt-era.demo.raw_papers` --TABLESAMPLE SYSTEM (0.01 PERCENT) 
      LEFT JOIN UNNEST(issns) AS issn
      INNER JOIN (    -- note: subject to constraints on the journal list (eg ERA 2018 vs 2023)
        SELECT issn
        FROM rt-era.demo.core_journals
        LEFT JOIN UNNEST(issns) AS issn
      ) AS B
      ON issn = B.issn
      GROUP BY doi
    )
    SELECT 
      A.doi                      AS doi,
      A.type = 'journal-article' AS is_article,
      C.doi IS NOT NULL          AS in_era,
      A.year                     AS year, 
      A.cits                     AS citations, 
      --A.title                           AS title,
      --A.authors                         AS authors
    FROM `rt-era.demo.raw_papers` AS A
    INNER JOIN linked_by_ror AS B ON A.doi = B.doi
    LEFT  JOIN linked_by_era AS C ON A.doi = C.doi
    ORDER BY year DESC, citations DESC
  );
  ALTER TABLE `rt-era.demo_inst.inst_outputs` SET OPTIONS(description='inst outputs that meet the basic criteria for ERA analysis');
  ALTER TABLE rt-era.demo_inst.inst_outputs
  ALTER COLUMN doi        SET OPTIONS (description="Digitial Object Identifier of the paper"),
  ALTER COLUMN is_article SET OPTIONS (description="True if the output is listed as a journal article in the COKI dataset"),
  ALTER COLUMN in_era     SET OPTIONS (description="True if the output has been linked to a journal in the ERA Journal List"),
  ALTER COLUMN year       SET OPTIONS (description="Year of publication"),
  ALTER COLUMN citations  SET OPTIONS (description="Current number of citations");
  --ALTER COLUMN title      SET OPTIONS (description="Title of the research output"),
  --ALTER COLUMN authors    SET OPTIONS (description="List of authors from Crossref");
  SELECT 
    COUNT(1)                           AS outputs,
    COUNTIF(is_article)                AS articles,
    COUNTIF(in_era)                    AS outputs_in_era,
    COUNTIF(is_article AND in_era)     AS articles_in_era,
    COUNTIF(NOT in_era)                AS outputs_missed_by_era,
    COUNTIF(is_article AND NOT in_era) AS articles_missed_by_era
  FROM rt-era.demo_inst.inst_outputs;

  --
  -- Build tables that summarises outputs for inst
  --
  CREATE TABLE IF NOT EXISTS `rt-era.demo_inst.inst_summary_by_field_year` AS (
    WITH
    A AS (SELECT * FROM `rt-era.demo.research_outputs_local_4_institution_field_year` WHERE institution = 'https://ror.org/02n415q13'),
    B AS (SELECT * FROM `rt-era.demo.research_outputs_world_4_institution_field_year` WHERE institution = 'https://ror.org/02n415q13'),
    C AS (SELECT code,name FROM rt-era.demo.core_fors)
    SELECT 
      A.field,
      C.name,
      A.year,

       A.sum_papers AS papers,
      A.rank_papers AS papers_rank_local,
      B.rank_papers AS papers_rank_world,
      B.cent_papers AS papers_cent_world,

       A.sum_citations AS citations,
      A.rank_citations AS citations_rank_local,
      B.rank_citations AS citations_rank_world,
      B.cent_citations AS citations_cent_world,

       A.sum_portions AS portions,
      A.rank_portions AS portions_rank_local,
      B.rank_portions AS portions_rank_world,
      B.cent_portions AS portions_cent_world,

      A.avg_citations AS cpp,
      A.rank_cpp      AS cpp_rank_local,
      B.rank_cpp      AS cpp_rank_world,
      B.cent_cpp      AS cpp_cent_world,
    FROM A 
    LEFT JOIN B ON A.field = B.field AND A.year = B.year
    LEFT JOIN C ON A.field = C.code
    ORDER BY field,year
  );
  CREATE TABLE IF NOT EXISTS `rt-era.demo_inst.inst_summary_by_field` AS (
    WITH
    A AS (SELECT * FROM `rt-era.demo.research_outputs_local_4_institution_field` WHERE institution = 'https://ror.org/02n415q13'),
    B AS (SELECT * FROM `rt-era.demo.research_outputs_world_4_institution_field` WHERE institution = 'https://ror.org/02n415q13'),
    C AS (SELECT code,name FROM rt-era.demo.core_fors)
    SELECT 
      A.field,
      C.name,

       A.sum_papers AS papers,
      A.rank_papers AS papers_rank_local,
      B.rank_papers AS papers_rank_world,
      B.cent_papers AS papers_cent_world,

       A.sum_citations AS citations,
      A.rank_citations AS citations_rank_local,
      B.rank_citations AS citations_rank_world,
      B.cent_citations AS citations_cent_world,

       A.sum_portions AS portions,
      A.rank_portions AS portions_rank_local,
      B.rank_portions AS portions_rank_world,
      B.cent_portions AS portions_cent_world,

      A.avg_citations AS cpp,
      A.rank_cpp      AS cpp_rank_local,
      B.rank_cpp      AS cpp_rank_world,
      B.cent_cpp      AS cpp_cent_world,
    FROM A 
    LEFT JOIN B ON A.field = B.field
    LEFT JOIN C ON A.field = C.code
    ORDER BY field
  );
  CREATE TABLE IF NOT EXISTS `rt-era.demo_inst.inst_summary_by_year` AS (
    WITH
    A AS (SELECT * FROM `rt-era.demo.research_outputs_local_4_institution_year` WHERE institution = 'https://ror.org/02n415q13'),
    B AS (SELECT * FROM `rt-era.demo.research_outputs_world_4_institution_year` WHERE institution = 'https://ror.org/02n415q13')
    SELECT 
      A.year,

       A.sum_papers AS papers,
      A.rank_papers AS papers_rank_local,
      B.rank_papers AS papers_rank_world,
      B.cent_papers AS papers_cent_world,

       A.sum_citations AS citations,
      A.rank_citations AS citations_rank_local,
      B.rank_citations AS citations_rank_world,
      B.cent_citations AS citations_cent_world,

       A.sum_portions AS portions,
      A.rank_portions AS portions_rank_local,
      B.rank_portions AS portions_rank_world,
      B.cent_portions AS portions_cent_world,

      A.avg_citations AS cpp,
      A.rank_cpp      AS cpp_rank_local,
      B.rank_cpp      AS cpp_rank_world,
      B.cent_cpp      AS cpp_cent_world,
    FROM A 
    LEFT JOIN B ON A.year = B.year
    ORDER BY year
  );
  ALTER TABLE `rt-era.demo_inst.inst_summary_by_field_year` SET OPTIONS(description='Total inst outputs by field of research and year');
  ALTER TABLE rt-era.demo_inst.inst_summary_by_field_year
  ALTER COLUMN field     SET OPTIONS (description="ANZSIC field of research code"),
  ALTER COLUMN name      SET OPTIONS(description='ANZSIC field of research name'),
  ALTER COLUMN year      SET OPTIONS (description="analysis year (publication year of articles)"),
  ALTER COLUMN papers    SET OPTIONS (description="total number of papers published by inst staff"),
  ALTER COLUMN citations SET OPTIONS (description="total number of citations for all papers"),
  ALTER COLUMN portions  SET OPTIONS (description="sum of paper apportionments to this field of research"),
  ALTER COLUMN cpp       SET OPTIONS (description="average citations per paper"),
  ALTER COLUMN papers_rank_local    SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN papers_rank_world    SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN papers_cent_world    SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world"),
  ALTER COLUMN citations_rank_local SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN citations_rank_world SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN citations_cent_world SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world"),
  ALTER COLUMN portions_rank_local  SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN portions_rank_world  SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN portions_cent_world  SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world"),
  ALTER COLUMN cpp_rank_local       SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN cpp_rank_world       SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN cpp_cent_world       SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world");

  ALTER TABLE `rt-era.demo_inst.inst_summary_by_field` SET OPTIONS(description='Total inst outputs by field of research');
  ALTER TABLE rt-era.demo_inst.inst_summary_by_field
  ALTER COLUMN field     SET OPTIONS (description="ANZSIC field of research code"),
  ALTER COLUMN name      SET OPTIONS(description='ANZSIC field of research name'),
  ALTER COLUMN papers    SET OPTIONS (description="total number of papers published by inst staff"),
  ALTER COLUMN citations SET OPTIONS (description="total number of citations for all papers"),
  ALTER COLUMN portions  SET OPTIONS (description="sum of paper apportionments to this field of research"),
  ALTER COLUMN cpp       SET OPTIONS (description="average citations per paper"),
  ALTER COLUMN papers_rank_local    SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN papers_rank_world    SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN papers_cent_world    SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world"),
  ALTER COLUMN citations_rank_local SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN citations_rank_world SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN citations_cent_world SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world"),
  ALTER COLUMN portions_rank_local  SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN portions_rank_world  SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN portions_cent_world  SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world"),
  ALTER COLUMN cpp_rank_local       SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN cpp_rank_world       SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN cpp_cent_world       SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world");

  ALTER TABLE `rt-era.demo_inst.inst_summary_by_year` SET OPTIONS(description='Total inst outputs by year');
  ALTER TABLE rt-era.demo_inst.inst_summary_by_year
  ALTER COLUMN year      SET OPTIONS (description="analysis year (publication year of articles)"),
  ALTER COLUMN papers    SET OPTIONS (description="total number of papers published by inst staff"),
  ALTER COLUMN citations SET OPTIONS (description="total number of citations for all papers"),
  ALTER COLUMN portions  SET OPTIONS (description="sum of paper apportionments to this field of research"),
  ALTER COLUMN cpp       SET OPTIONS (description="average citations per paper"),
  ALTER COLUMN papers_rank_local    SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN papers_rank_world    SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN papers_cent_world    SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world"),
  ALTER COLUMN citations_rank_local SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN citations_rank_world SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN citations_cent_world SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world"),
  ALTER COLUMN portions_rank_local  SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN portions_rank_world  SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN portions_cent_world  SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world"),
  ALTER COLUMN cpp_rank_local       SET OPTIONS (description="rank versus other Australian HEPs (1:best, 40:worst)"),
  ALTER COLUMN cpp_rank_world       SET OPTIONS (description="rank versus all world instutions (1:best)"),
  ALTER COLUMN cpp_cent_world       SET OPTIONS (description="world percentile, 1-100. 1 = top 1% in the world");

  -- Assigns RCI classes to inst outputs
  CREATE TABLE IF NOT EXISTS `rt-era.demo_inst.inst_paper_classes` AS (
    SELECT DISTINCT
      paper_doi AS doi,
      A.year,
      citations,
      F.code,
      G.name,
      IF (B.cpp_local = 0, 0.0, ROUND(citations / B.cpp_local,4)) AS rci_local,
      IF (B.cpp_world = 0, 0.0, ROUND(citations / B.cpp_world,4)) AS rci_world,
      IF (B.cpp_hpi   = 0, 0.0, ROUND(citations / B.cpp_hpi  ,4)) AS rci_hpi,
      citations > B.cpp_hpi AS high_perf,
      CASE
        WHEN citations > B.ctile_01 THEN 1
        WHEN citations > B.ctile_05 THEN 5
        WHEN citations > B.ctile_10 THEN 10
        WHEN citations > B.ctile_25 THEN 25
        WHEN citations > B.ctile_50 THEN 50
        ELSE 100
      END AS cent_group,
      CASE
        WHEN citations > B.dynamic_c4 THEN 5
        WHEN citations > B.dynamic_c3 THEN 4
        WHEN citations > B.dynamic_c2 THEN 3
        WHEN citations > B.dynamic_c1 THEN 2
        WHEN citations > B.dynamic_c0 THEN 1
        ELSE 0
      END AS cat_dynamic,
      CASE
        WHEN citations > B.static_c5 THEN 6
        WHEN citations > B.static_c4 THEN 5
        WHEN citations > B.static_c3 THEN 4
        WHEN citations > B.static_c2 THEN 3
        WHEN citations > B.static_c1 THEN 2
        WHEN citations > B.static_c0 THEN 1
        ELSE 0
      END AS cat_static
    FROM `rt-era.demo_inst.inst_papers` AS A
    LEFT JOIN UNNEST(field) as F
    LEFT JOIN `rt-era.demo.benchmarks_summary_4` AS B ON A.year = B.year AND F.code = B.field
    LEFT JOIN `rt-era.demo.core_fors` AS G ON F.code = G.code
    WHERE LENGTH(F.code) = 4
    ORDER BY year, doi, code
  );
  ALTER TABLE `rt-era.demo_inst.inst_paper_classes` SET OPTIONS(description='inst papers with various ERA ratings methods');
  ALTER TABLE rt-era.demo_inst.inst_paper_classes
  ALTER COLUMN doi         SET OPTIONS(description="digital object identifier for the paper"),
  ALTER COLUMN year        SET OPTIONS(description="year of publication"),
  ALTER COLUMN citations   SET OPTIONS(description="number of citations"),
  ALTER COLUMN code        SET OPTIONS(description="ANZSIC field of research code"),
  ALTER COLUMN name        SET OPTIONS(description='ANZSIC field of research name'),
  ALTER COLUMN rci_local   SET OPTIONS(description="relative citation impact using the Australian benchmark"),
  ALTER COLUMN rci_world   SET OPTIONS(description="relative citation impact using the world benchmark"),
  ALTER COLUMN rci_hpi     SET OPTIONS(description="relative citation impact using the world high-performing institutions benchmark"),
  ALTER COLUMN high_perf   SET OPTIONS(description="true if the paper is above the high-performing benchmark"),
  ALTER COLUMN cent_group  SET OPTIONS(description="ERA percentile grouping. The groupings are top 1%, 1-5%, 5-10%, 10-25%, 25-50%, bottom 50%"),
  ALTER COLUMN cat_dynamic SET OPTIONS(description="ERA dynamic RCI category. 0:uncited, 5:best"),
  ALTER COLUMN cat_static  SET OPTIONS(description="ERA static RCI category. 0:uncited, 6:best");

  -- tally up RCI classes by (field,year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo_inst.inst_class_tallies_by_field_year` AS (
    SELECT
      year,
      code AS field,
      name,
      COUNT(1) AS publications,
      SUM(citations) AS citations,
      ROUND(AVG(rci_local),4) AS avg_rci_local,
      ROUND(AVG(rci_world),4) AS avg_rci_world,
      ROUND(AVG(rci_hpi)  ,4) AS avg_rci_hpi,
      COUNTIF(high_perf) AS high_perf,
      COUNTIF(cent_group =   1) AS c1,
      COUNTIF(cent_group =   5) AS c5,
      COUNTIF(cent_group =  10) AS c10,
      COUNTIF(cent_group =  25) AS c25,
      COUNTIF(cent_group =  50) AS c50,
      COUNTIF(cent_group = 100) AS c100,
      COUNTIF(cat_dynamic = 5) AS d5,
      COUNTIF(cat_dynamic = 4) AS d4,
      COUNTIF(cat_dynamic = 3) AS d3,
      COUNTIF(cat_dynamic = 2) AS d2,
      COUNTIF(cat_dynamic = 1) AS d1,
      COUNTIF(cat_dynamic = 0) AS d0,
      COUNTIF(cat_static = 6) AS s6,
      COUNTIF(cat_static = 5) AS s5,
      COUNTIF(cat_static = 4) AS s4,
      COUNTIF(cat_static = 3) AS s3,
      COUNTIF(cat_static = 2) AS s2,
      COUNTIF(cat_static = 1) AS s1,
      COUNTIF(cat_static = 0) AS s0
    FROM rt-era.demo_inst.inst_paper_classes
    GROUP BY year,field,name
    ORDER BY year,field,name
  );

  -- tally up RCI classes by (field)
  CREATE TABLE IF NOT EXISTS `rt-era.demo_inst.inst_class_tallies_by_field` AS (
    SELECT
      code AS field,
      name,
      COUNT(1) AS publications,
      SUM(citations) AS citations,
      ROUND(AVG(rci_local),4) AS avg_rci_local,
      ROUND(AVG(rci_world),4) AS avg_rci_world,
      ROUND(AVG(rci_hpi)  ,4) AS avg_rci_hpi,
      COUNTIF(high_perf) AS high_perf,
      COUNTIF(cent_group =   1) AS c1,
      COUNTIF(cent_group =   5) AS c5,
      COUNTIF(cent_group =  10) AS c10,
      COUNTIF(cent_group =  25) AS c25,
      COUNTIF(cent_group =  50) AS c50,
      COUNTIF(cent_group = 100) AS c100,
      COUNTIF(cat_dynamic = 5) AS d5,
      COUNTIF(cat_dynamic = 4) AS d4,
      COUNTIF(cat_dynamic = 3) AS d3,
      COUNTIF(cat_dynamic = 2) AS d2,
      COUNTIF(cat_dynamic = 1) AS d1,
      COUNTIF(cat_dynamic = 0) AS d0,
      COUNTIF(cat_static = 6) AS s6,
      COUNTIF(cat_static = 5) AS s5,
      COUNTIF(cat_static = 4) AS s4,
      COUNTIF(cat_static = 3) AS s3,
      COUNTIF(cat_static = 2) AS s2,
      COUNTIF(cat_static = 1) AS s1,
      COUNTIF(cat_static = 0) AS s0
    FROM rt-era.demo_inst.inst_paper_classes
    GROUP BY field,name
    ORDER BY field,name
  );

  -- tally up RCI classes by (year)
  CREATE TABLE IF NOT EXISTS `rt-era.demo_inst.inst_class_tallies_by_year` AS (
    SELECT
      year,
      COUNT(1) AS publications,
      SUM(citations) AS citations,
      ROUND(AVG(rci_local),4) AS avg_rci_local,
      ROUND(AVG(rci_world),4) AS avg_rci_world,
      ROUND(AVG(rci_hpi)  ,4) AS avg_rci_hpi,
      COUNTIF(high_perf) AS high_perf,
      COUNTIF(cent_group =   1) AS c1,
      COUNTIF(cent_group =   5) AS c5,
      COUNTIF(cent_group =  10) AS c10,
      COUNTIF(cent_group =  25) AS c25,
      COUNTIF(cent_group =  50) AS c50,
      COUNTIF(cent_group = 100) AS c100,
      COUNTIF(cat_dynamic = 5) AS d5,
      COUNTIF(cat_dynamic = 4) AS d4,
      COUNTIF(cat_dynamic = 3) AS d3,
      COUNTIF(cat_dynamic = 2) AS d2,
      COUNTIF(cat_dynamic = 1) AS d1,
      COUNTIF(cat_dynamic = 0) AS d0,
      COUNTIF(cat_static = 6) AS s6,
      COUNTIF(cat_static = 5) AS s5,
      COUNTIF(cat_static = 4) AS s4,
      COUNTIF(cat_static = 3) AS s3,
      COUNTIF(cat_static = 2) AS s2,
      COUNTIF(cat_static = 1) AS s1,
      COUNTIF(cat_static = 0) AS s0
    FROM rt-era.demo_inst.inst_paper_classes
    GROUP BY year
    ORDER BY year
  );
  ALTER TABLE `rt-era.demo_inst.inst_class_tallies_by_field_year` SET OPTIONS(description='Tallies of inst papers in each citation class, by field of research and year');
  ALTER TABLE rt-era.demo_inst.inst_class_tallies_by_field_year
  ALTER COLUMN year          SET OPTIONS(description='year of analysis (publication year of papers)'),
  ALTER COLUMN field         SET OPTIONS(description='ANZSIC field of research code'),
  ALTER COLUMN name          SET OPTIONS(description='ANZSIC field of research name'),
  ALTER COLUMN publications  SET OPTIONS(description='total number of publications'),
  ALTER COLUMN citations     SET OPTIONS(description='total number of citations'),
  ALTER COLUMN avg_rci_local SET OPTIONS(description='average RCI-local score'),
  ALTER COLUMN avg_rci_world SET OPTIONS(description='average RCI-world score'),
  ALTER COLUMN avg_rci_hpi   SET OPTIONS(description='average RCI-high-performing score'),
  ALTER COLUMN high_perf     SET OPTIONS(description='number of papers that are above the high performance threshold'),
  ALTER COLUMN c1            SET OPTIONS(description='number of papers in ERA percentile range < 1%'),
  ALTER COLUMN c5            SET OPTIONS(description='number of papers in ERA percentile range 1% to < 5%'),
  ALTER COLUMN c10           SET OPTIONS(description='number of papers in ERA percentile range 5% to < 10%'),
  ALTER COLUMN c25           SET OPTIONS(description='number of papers in ERA percentile range 10% to < 25%'),
  ALTER COLUMN c50           SET OPTIONS(description='number of papers in ERA percentile range 25% to < 50%'),
  ALTER COLUMN c100          SET OPTIONS(description='number of papers in ERA percentile range >= 50%'),
  ALTER COLUMN d5            SET OPTIONS(description='number of papers with dynamic RCI class 5 (best)'),
  ALTER COLUMN d4            SET OPTIONS(description='number of papers with dynamic RCI class 4'),
  ALTER COLUMN d3            SET OPTIONS(description='number of papers with dynamic RCI class 3'),
  ALTER COLUMN d2            SET OPTIONS(description='number of papers with dynamic RCI class 2'),
  ALTER COLUMN d1            SET OPTIONS(description='number of papers with dynamic RCI class 1'),
  ALTER COLUMN d0            SET OPTIONS(description='number of papers with dynamic RCI class 0 (uncited)'),
  ALTER COLUMN s6            SET OPTIONS(description='number of papers with static RCI class 6 (best)'),
  ALTER COLUMN s5            SET OPTIONS(description='number of papers with static RCI class 5'),
  ALTER COLUMN s4            SET OPTIONS(description='number of papers with static RCI class 4'),
  ALTER COLUMN s3            SET OPTIONS(description='number of papers with static RCI class 3'),
  ALTER COLUMN s2            SET OPTIONS(description='number of papers with static RCI class 2'),
  ALTER COLUMN s1            SET OPTIONS(description='number of papers with static RCI class 1'),
  ALTER COLUMN s0            SET OPTIONS(description='number of papers with static RCI class 0 (uncited)');

  ALTER TABLE `rt-era.demo_inst.inst_class_tallies_by_field` SET OPTIONS(description='Tallies of inst papers in each citation class, by field of research');
  ALTER TABLE rt-era.demo_inst.inst_class_tallies_by_field
  ALTER COLUMN field         SET OPTIONS(description='ANZSIC field of research code'),
  ALTER COLUMN name          SET OPTIONS(description='ANZSIC field of research name'),
  ALTER COLUMN publications  SET OPTIONS(description='total number of publications'),
  ALTER COLUMN citations     SET OPTIONS(description='total number of citations'),
  ALTER COLUMN avg_rci_local SET OPTIONS(description='average RCI-local score'),
  ALTER COLUMN avg_rci_world SET OPTIONS(description='average RCI-world score'),
  ALTER COLUMN avg_rci_hpi   SET OPTIONS(description='average RCI-high-performing score'),
  ALTER COLUMN high_perf     SET OPTIONS(description='number of papers that are above the high performance threshold'),
  ALTER COLUMN c1            SET OPTIONS(description='number of papers in ERA percentile range < 1%'),
  ALTER COLUMN c5            SET OPTIONS(description='number of papers in ERA percentile range 1% to < 5%'),
  ALTER COLUMN c10           SET OPTIONS(description='number of papers in ERA percentile range 5% to < 10%'),
  ALTER COLUMN c25           SET OPTIONS(description='number of papers in ERA percentile range 10% to < 25%'),
  ALTER COLUMN c50           SET OPTIONS(description='number of papers in ERA percentile range 25% to < 50%'),
  ALTER COLUMN c100          SET OPTIONS(description='number of papers in ERA percentile range >= 50%'),
  ALTER COLUMN d5            SET OPTIONS(description='number of papers with dynamic RCI class 5 (best)'),
  ALTER COLUMN d4            SET OPTIONS(description='number of papers with dynamic RCI class 4'),
  ALTER COLUMN d3            SET OPTIONS(description='number of papers with dynamic RCI class 3'),
  ALTER COLUMN d2            SET OPTIONS(description='number of papers with dynamic RCI class 2'),
  ALTER COLUMN d1            SET OPTIONS(description='number of papers with dynamic RCI class 1'),
  ALTER COLUMN d0            SET OPTIONS(description='number of papers with dynamic RCI class 0 (uncited)'),
  ALTER COLUMN s6            SET OPTIONS(description='number of papers with static RCI class 6 (best)'),
  ALTER COLUMN s5            SET OPTIONS(description='number of papers with static RCI class 5'),
  ALTER COLUMN s4            SET OPTIONS(description='number of papers with static RCI class 4'),
  ALTER COLUMN s3            SET OPTIONS(description='number of papers with static RCI class 3'),
  ALTER COLUMN s2            SET OPTIONS(description='number of papers with static RCI class 2'),
  ALTER COLUMN s1            SET OPTIONS(description='number of papers with static RCI class 1'),
  ALTER COLUMN s0            SET OPTIONS(description='number of papers with static RCI class 0 (uncited)');

  ALTER TABLE `rt-era.demo_inst.inst_class_tallies_by_year` SET OPTIONS(description='Tallies of inst papers in each citation class, by year');
  ALTER TABLE rt-era.demo_inst.inst_class_tallies_by_year
  ALTER COLUMN year          SET OPTIONS(description='year of analysis (publication year of papers)'),
  ALTER COLUMN publications  SET OPTIONS(description='total number of publications'),
  ALTER COLUMN citations     SET OPTIONS(description='total number of citations'),
  ALTER COLUMN avg_rci_local SET OPTIONS(description='average RCI-local score'),
  ALTER COLUMN avg_rci_world SET OPTIONS(description='average RCI-world score'),
  ALTER COLUMN avg_rci_hpi   SET OPTIONS(description='average RCI-high-performing score'),
  ALTER COLUMN high_perf     SET OPTIONS(description='number of papers that are above the high performance threshold'),
  ALTER COLUMN c1            SET OPTIONS(description='number of papers in ERA percentile range < 1%'),
  ALTER COLUMN c5            SET OPTIONS(description='number of papers in ERA percentile range 1% to < 5%'),
  ALTER COLUMN c10           SET OPTIONS(description='number of papers in ERA percentile range 5% to < 10%'),
  ALTER COLUMN c25           SET OPTIONS(description='number of papers in ERA percentile range 10% to < 25%'),
  ALTER COLUMN c50           SET OPTIONS(description='number of papers in ERA percentile range 25% to < 50%'),
  ALTER COLUMN c100          SET OPTIONS(description='number of papers in ERA percentile range >= 50%'),
  ALTER COLUMN d5            SET OPTIONS(description='number of papers with dynamic RCI class 5 (best)'),
  ALTER COLUMN d4            SET OPTIONS(description='number of papers with dynamic RCI class 4'),
  ALTER COLUMN d3            SET OPTIONS(description='number of papers with dynamic RCI class 3'),
  ALTER COLUMN d2            SET OPTIONS(description='number of papers with dynamic RCI class 2'),
  ALTER COLUMN d1            SET OPTIONS(description='number of papers with dynamic RCI class 1'),
  ALTER COLUMN d0            SET OPTIONS(description='number of papers with dynamic RCI class 0 (uncited)'),
  ALTER COLUMN s6            SET OPTIONS(description='number of papers with static RCI class 6 (best)'),
  ALTER COLUMN s5            SET OPTIONS(description='number of papers with static RCI class 5'),
  ALTER COLUMN s4            SET OPTIONS(description='number of papers with static RCI class 4'),
  ALTER COLUMN s3            SET OPTIONS(description='number of papers with static RCI class 3'),
  ALTER COLUMN s2            SET OPTIONS(description='number of papers with static RCI class 2'),
  ALTER COLUMN s1            SET OPTIONS(description='number of papers with static RCI class 1'),
  ALTER COLUMN s0            SET OPTIONS(description='number of papers with static RCI class 0 (uncited)');

END;
