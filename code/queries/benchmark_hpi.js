/*
## Summary
Compiles data for benchmark CPPs, used by the ERA 2023 HPI indicator.

## Description 
The HPI benchmark provides a CPP (citations per paper) target for high-performing institutions.

See: https://github.com/Curtin-Open-Knowledge-Initiative/coki-ries/blob/main/docs/era_2023.md

- restricted to journal articles, conference publications and review articles
- restricted to outputs published by journals in the ERA 2023 Journal List
- restricted to outputs published in the ERA 2023 timeframe (2016-21)
- excludes institutions that do not meet the low volume threshold (for a FoR)
- does not compute a benchmark for a FoR(year) if there are < 10 institutions above threshold
- takes the top 10% of institutions above threshold and computes the average citations per paper from this group
- this average is the HPI benchmark and is provided by FoR and year

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0

## Requires
table research_outputs_*

## Creates
table benchmarks_hpi_*
*/
const compile = ({
  ns_core   = 'project.dataset',
  digits    = 4,
  threshold = 50,
  replace   = false,
}) => `
-- generated by: ${__filename}
BEGIN
  -- build the High Performance Indicator benchmark table
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.benchmarks_hpi_world_${digits}\` AS (
    
    -- filter for active institutions (>= ${threshold} outputs in a field)
    WITH active_institutions AS (
      SELECT institution, field, sum_papers, sum_citations
      FROM \`${ns_core}.research_outputs_world_${digits}_institution_field\`
      WHERE sum_papers >= ${threshold}
    ),
    
    -- filter for active fields
    active_fields AS (
      SELECT field, num_active FROM (
        SELECT COUNT(1) AS num_active, field
        FROM active_institutions
        GROUP BY field
      )
      WHERE num_active >= 10
    )

    -- create the benchmark table
    SELECT
      field,
      year,
      COUNT(DISTINCT institution)          AS num_institutions,
      SUM(sum_papers)                      AS sum_papers,
      SUM(sum_citations)                   AS sum_citations,
      SUM(sum_citations) / SUM(sum_papers) AS benchmark
    FROM (
      SELECT 
        A.institution, 
        A.field, 
        A.year, 
        A.sum_papers, 
        A.sum_citations,
        A.avg_citations,
        PERCENT_RANK() OVER (PARTITION BY A.field, A.year ORDER BY A.avg_citations DESC) AS pct_rank
      FROM \`${ns_core}.research_outputs_world_${digits}_institution_field_year\` AS A
      INNER JOIN active_institutions AS B ON A.institution = B.institution
      INNER JOIN active_fields       AS C ON A.field = C.field
    )
    WHERE pct_rank <= 0.1
    GROUP BY field,year
    ORDER BY field,year
  );
  ALTER TABLE \`${ns_core}.benchmarks_hpi_world_${digits}\`
  ALTER COLUMN field            SET OPTIONS (description="Field of Research (FoR) code (${digits}-digits)"),
  ALTER COLUMN year             SET OPTIONS (description="Year of consideration (research outputs published in this year)"),
  ALTER COLUMN num_institutions SET OPTIONS (description="The number of high performing institutions that made it into the top 10%"),
  ALTER COLUMN sum_papers       SET OPTIONS (description="The number of papers published by the top 10% of institutions"),
  ALTER COLUMN sum_citations    SET OPTIONS (description="The total number of citations for outputs published by the top 10% of institutions"),
  ALTER COLUMN benchmark        SET OPTIONS (description="The average CPP (citations per paper) for the top 10% of institutions");
END;
`;
function compile_all(args={}) {
  return [
    compile({ ...args, digits:4, threshold:50 }),
    compile({ ...args, digits:2, threshold:50 }),
  ];
}
module.exports = { compile, compile_all };
if (require.main === module) require('app').cli_compile(compile_all);
