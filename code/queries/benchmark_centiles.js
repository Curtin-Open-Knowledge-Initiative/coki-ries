/*
## Summary
Compiles data for the ERA centiles indicator.

## Description
For a detailed method description, see:
https://github.com/Curtin-Open-Knowledge-Initiative/for_benchmark_predictions/blob/main/docs/era_2018.md#indicator-distribution-of-papers-based-on-global-centiles

For each Field of Research (FoR) and for each year in the ERA evaluation window(s), papers that belong to this grouping are sorted by citation count, then percentile thresholds are determined. The median becomes a benchmark for comparison of CPP (citations per paper) when calculating a paper's RCI score (relative citation impact).

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0

## Requires
table core_papers

## Creates
table benchmarks_centiles_*
table centiles_tallies_*
*/
const compile = ({
  ns_core = 'project.dataset',
  scope   = 'world',
  digits  = 4,
  replace = false,
}) => `
-- generated by: ${__filename}
BEGIN
  -- citation centile boundaries [${scope},${digits}]
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.benchmarks_centiles_${scope}_${digits}\` AS (
    SELECT DISTINCT 
      F.code AS field, 
      year_published AS year, 
      PERCENTILE_DISC(num_citations, 0.99 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c1, 
      PERCENTILE_DISC(num_citations, 0.95 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c5, 
      PERCENTILE_DISC(num_citations, 0.90 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c10, 
      PERCENTILE_DISC(num_citations, 0.75 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c25, 
      PERCENTILE_DISC(num_citations, 0.50 IGNORE NULLS) OVER(PARTITION BY F.code, year_published) AS c50, 
      COUNT(DISTINCT doi) OVER(PARTITION BY F.code, year_published) AS num_outputs
    FROM \`${ns_core}.core_papers\` AS A
    LEFT JOIN UNNEST(fors) AS F
    WHERE LENGTH(F.code) >= ${digits} ${scope=='local' ? 'AND ARRAY_LENGTH(heps) > 0' : ''}
    ORDER BY field,year
  );

  -- gather statistics for each centile group [${scope},${digits}]
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.centile_tallies_${scope}_${digits}\` AS (
    SELECT 
      F.code AS field,
      year_published AS year,

      COUNTIF(num_citations >= c1                          ) AS papers_1,
      COUNTIF(num_citations >= c5   AND num_citations < c1 ) AS papers_5,
      COUNTIF(num_citations >= c10  AND num_citations < c5 ) AS papers_10,
      COUNTIF(num_citations >= c25  AND num_citations < c10) AS papers_25,
      COUNTIF(num_citations >= c50  AND num_citations < c25) AS papers_50,
      COUNTIF(num_citations != 0    AND num_citations < c50) AS papers_100,
      COUNTIF(num_citations  = 0                           ) AS papers_uncited,
      COUNT(1)                                               AS papers_all,

      SUM(IF(num_citations >= c1                          , num_citations, 0)) AS citations_1,
      SUM(IF(num_citations >= c5   AND num_citations < c1 , num_citations, 0)) AS citations_5,
      SUM(IF(num_citations >= c10  AND num_citations < c5 , num_citations, 0)) AS citations_10,
      SUM(IF(num_citations >= c25  AND num_citations < c10, num_citations, 0)) AS citations_25,
      SUM(IF(num_citations >= c50  AND num_citations < c25, num_citations, 0)) AS citations_50,
      SUM(IF(num_citations != 0    AND num_citations < c50, num_citations, 0)) AS citations_100,
      SUM(IF(num_citations  = 0                           , num_citations, 0)) AS citations_uncited,
      SUM(                                                  num_citations    ) AS citations_all,

      ROUND(SUM(IF(num_citations >= c1                          , weight, 0)),2) AS portions_1,
      ROUND(SUM(IF(num_citations >= c5   AND num_citations < c1 , weight, 0)),2) AS portions_5,
      ROUND(SUM(IF(num_citations >= c10  AND num_citations < c5 , weight, 0)),2) AS portions_10,
      ROUND(SUM(IF(num_citations >= c25  AND num_citations < c10, weight, 0)),2) AS portions_25,
      ROUND(SUM(IF(num_citations >= c50  AND num_citations < c25, weight, 0)),2) AS portions_50,
      ROUND(SUM(IF(num_citations != 0    AND num_citations < c50, weight, 0)),2) AS portions_100,
      ROUND(SUM(IF(num_citations  = 0                           , weight, 0)),2) AS portions_uncited,
      ROUND(SUM(                                                  weight    ),2) AS portions_all

    FROM \`${ns_core}.core_papers\` AS A
    LEFT JOIN UNNEST(fors) AS F
    LEFT JOIN \`${ns_core}.benchmarks_centiles_${scope}_${digits}\` AS B ON F.code = B.field AND year_published = B.year
    WHERE LENGTH(F.code) >= ${digits} ${scope=='local' ? 'AND ARRAY_LENGTH(heps) > 0' : ''}
    GROUP BY field,year 
    ORDER BY field,year 
  );
END;
`;
function compile_all(args={}) {
  return [
    compile({ ...args, scope:'world', digits:4 }),
    compile({ ...args, scope:'world', digits:2 }),
    compile({ ...args, scope:'local', digits:4 }),
    compile({ ...args, scope:'local', digits:2 }),
  ];
}
module.exports = { compile, compile_all };
if (require.main === module) require('app').cli_compile(compile_all);
