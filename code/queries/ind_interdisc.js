/*
## Summary
Compiles data for the ERA interdisciplinary indicator.

## Description
For methodology, see:
https://github.com/Curtin-Open-Knowledge-Initiative/for_benchmark_predictions/blob/main/docs/era_2018.md#indicator-interdisciplinary-profiles

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0

## Requires
table core_papers
table core_fors

## Creates
table interdisc_*
*/
const compile = ({
  ns_core = 'project.dataset',
  scope   = 'world',
  digits  = 4,
  replace = false,
}) => `
-- generated by: ${__filename}
BEGIN
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.interdisc_${scope}_${digits}\` AS (
    WITH 
    codes AS (
      SELECT 
        A.doi,
        SUBSTRING(B.code,0,${digits}) AS code,
        B.weight AS weight,
        C.name
      FROM \`${ns_core}.core_papers\` AS A 
      LEFT JOIN UNNEST(fors) AS B
      LEFT JOIN \`${ns_core}.core_fors\` AS C ON SUBSTRING(B.code,0,2) = C.code
      WHERE LENGTH(B.code) >= ${digits}
    ),
    pairs AS (
      SELECT 
        A.doi,
        A.code AS code1,
        A.name AS name1,
        B.code AS code2,
        B.name AS name2,
        A.weight AS weight1,
        B.weight AS weight2
      FROM       codes AS A
      INNER JOIN codes AS B ON A.doi = B.doi AND A.code != B.code
    ),
    final AS (
      SELECT 
        code1, name1,
        code2, name2,
        COUNT(1) AS num,
        ROUND(SUM(weight2),2) AS weight
      FROM pairs AS A
      GROUP BY code1, name1, code2, name2
      ORDER BY code1, weight DESC
    )
    SELECT
      *,
      ROUND(100 * num / SUM(num) OVER (PARTITION BY code1),2) AS pct_num,
      ROUND(100 * weight / SUM(weight) OVER (PARTITION BY code1),2) AS pct_weight
    FROM final
    ORDER BY code1,weight DESC
  );
END;`;
const compile_all = (args={}) => [ 
  compile({ ...args, scope:'world', digits:4 }),
  compile({ ...args, scope:'world', digits:2 }),
  compile({ ...args, scope:'local', digits:4 }),
  compile({ ...args, scope:'local', digits:2 }),
];
module.exports = { compile, compile_all };
if (require.main === module) require('app').cli_compile(compile_all);
