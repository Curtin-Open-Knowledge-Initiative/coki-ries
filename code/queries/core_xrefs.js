/*
## Summary
Prepares a set of foreign key linkages between core tables (not used in BigQuery).

## Description
Creates the following tables:
- xref_paper_journal (via ISSNL)
- xref_hep_paper (via RoR)
- xref_ror_paper
- xref_hep_journal (via paper)
- xref_ror_journal
- xref_for_hep (via paper)
- xref_for_ror
- xref_for_journal (via FoR) (code weightings added here)
- xref_for_paper (via journal) (code weightings added here)

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0

-- inactive ## Requires
table core_issnls
table core_heps
table core_rors
table core_fors
table core_journals
table core_papers

-- inactive ## Creates
table xref_issn_issnl
table xref_issn_paper
table xref_issn_journal
table xref_paper_journal
table xref_for_ror
table xref_for_hep
table xref_for_journal
table xref_for_paper
table xref_ror_journal
table xref_ror_paper
table xref_hep_journal
table xref_hep_paper

*/
const app = require('app');
const compile = ({
  ns_core = 'project.dataset',
  replace = false,
}) => `
-- generated by: ${__filename}
BEGIN
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.errors\`   (table STRING, pkey STRING, message STRING);
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.warnings\` (table STRING, pkey STRING, message STRING);

  -- link issns with issnls
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_issn_issnl\` AS (
    SELECT issnl,issn
    FROM ${ns_core}.core_issnls
    LEFT JOIN UNNEST(issns) AS issn
    GROUP BY issnl,issn
    ORDER BY issnl,issn
  );
  ALTER TABLE \`${ns_core}.xref_issn_issnl\` SET OPTIONS(description='cross reference table between ISSN values and linking-ISSN values.  Source: https://www.issn.org/wp-content/uploads/2014/03/issnltables.zip');
  ALTER TABLE ${ns_core}.xref_issn_issnl
  ALTER COLUMN issnl SET OPTIONS (description="Linking ISSN"),
  ALTER COLUMN issn  SET OPTIONS (description="ISSN value associated with the linking ISSN");
  SELECT 'xref_issn_issnl', COUNT(1) AS total, COUNT(DISTINCT issn) AS uniqueA, COUNT(DISTINCT doi) AS uniqueB FROM ${ns_core}.xref_issn_issnl;

  -- link issns with papers (according to the papers table)
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_issn_paper\` AS (
    SELECT issn,doi
    FROM ${ns_core}.core_papers
    LEFT JOIN UNNEST(issns) AS issn
    INNER JOIN \`${ns_core}.xref_issn_issnl\` AS X ON issn = X.issn
    ORDER BY doi,issn
  );
  ALTER TABLE \`${ns_core}.xref_issn_paper\` SET OPTIONS(description='cross reference table between core_issns and core_papers');
  ALTER TABLE ${ns_core}.xref_issn_paper
  ALTER COLUMN issn SET OPTIONS (description='core_issns primary key'),
  ALTER COLUMN doi  SET OPTIONS (description='core_papers primary key');
  SELECT 'xref_issn_paper', COUNT(1) AS total, COUNT(DISTINCT issn) AS uniqueA, COUNT(DISTINCT doi) AS uniqueB FROM ${ns_core}.xref_issn_paper;
  
  -- link issns with journals (according to the journals table)
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_issn_journal\` AS (
    SELECT issn,era_id
    FROM ${ns_core}.core_journals
    LEFT JOIN UNNEST(issns) AS issn
    INNER JOIN \`${ns_core}.xref_issn_issnl\` AS X ON issn = X.issn
    ORDER BY era_id,issn
  );
  ALTER TABLE \`${ns_core}.xref_issn_journal\` SET OPTIONS(description='cross reference table between core_issns and core_journals');
  ALTER TABLE ${ns_core}.xref_issn_journal
  ALTER COLUMN issn SET OPTIONS (description='core_issns primary key'),
  ALTER COLUMN doi  SET OPTIONS (description='core_papers primary key');
  SELECT 'xref_issn_journal', COUNT(1) AS total, COUNT(DISTINCT issn) AS uniqueA, COUNT(DISTINCT doi) AS uniqueB FROM ${ns_core}.xref_issn_journal;

  -- link papers with journals (via ISSNs)
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_paper_journal\` AS (
    SELECT doi,era_id
    FROM \`${ns_core}.xref_issn_paper\` AS A
    LEFT JOIN \`${ns_core}.xref_issn_journal\` AS B
    ON A.issn = B.issn
    GROUP BY doi,era_id
    ORDER BY doi,era_id
  );
  ALTER TABLE \`${ns_core}.xref_paper_journal\` SET OPTIONS(description='cross reference table between core_papers and core_journals');
  ALTER TABLE ${ns_core}.xref_paper_journal
  ALTER COLUMN doi    SET OPTIONS (description='core_papers primary key'),
  ALTER COLUMN era_id SET OPTIONS (description='core_journals primary key');
  SELECT 'xref_paper_journal', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniqueA, COUNT(DISTINCT era_id) AS uniqueB FROM ${ns_core}.xref_paper_journal;

  -- link fields of research with research institutions
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_for_ror\` AS (
    SELECT A.vers, A.code, B.ror 
    FROM \`${ns_core}.core_fors\` AS A
    CROSS JOIN \`${ns_core}.core_rors\` AS B
    GROUP BY vers,code,ror 
    ORDER BY vers,code,ror 
  );
  ALTER TABLE \`${ns_core}.xref_for_ror\` SET OPTIONS(description='cross reference table between core_fors and core_rors');
  ALTER TABLE ${ns_core}.xref_for_ror
  ALTER COLUMN vers SET OPTIONS (description='core_fors primary key (first half)'),
  ALTER COLUMN code SET OPTIONS (description='core_fors primary key (second half)'),
  ALTER COLUMN ror  SET OPTIONS (description='core_rors primary key');
  SELECT 'xref_for_ror', COUNT(1) AS total, COUNT(DISTINCT vers,code) AS uniqueA, COUNT(DISTINCT ror) AS uniqueB FROM ${ns_core}.xref_for_ror;

  -- link higher education providers with papers
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_hep_paper\` AS (
    SELECT doi,ror 
    FROM \`${ns_core}.core_papers\` 
    LEFT JOIN UNNEST(heps) AS ror 
    INNER JOIN \`${ns_core}.core_heps\` AS B
    ON ror = B.ror AND ror IS NOT NULL
    GROUP BY doi,ror
    ORDER BY doi,ror
  );
  ALTER TABLE \`${ns_core}.xref_hep_paper\` SET OPTIONS(description='cross reference table between core_heps and core_papers');
  ALTER TABLE ${ns_core}.xref_hep_paper
  ALTER COLUMN doi SET OPTIONS (description='core_papers primary key'),
  ALTER COLUMN ror SET OPTIONS (description='core_rors primary key');
  SELECT 'xref_hep_paper', COUNT(1) AS total, COUNT(DISTINCT doi) AS uniqueA, COUNT(DISTINCT ror) AS uniqueB FROM ${ns_core}.xref_hep_paper;

  -- link higher education providers with journals
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_hep_journal\` AS (
    SELECT A.era_id, B.ror 
    FROM \`${ns_core}.xref_paper_journal\` AS A
    INNER JOIN \`${ns_core}.xref_hep_paper\` AS B
    ON A.doi = B.doi AND A.doi IS NOT NULL 
    GROUP BY era_id,ror 
    ORDER BY era_id,ror
  );
  ALTER TABLE \`${ns_core}.xref_hep_journal\` SET OPTIONS(description='cross reference table between core_heps and core_journals');
  ALTER TABLE ${ns_core}.xref_hep_journal
  ALTER COLUMN era_id SET OPTIONS (description='core_journals primary key'),
  ALTER COLUMN ror    SET OPTIONS (description='core_rors primary key');
  SELECT 'xref_hep_journal', COUNT(1) AS total, COUNT(DISTINCT era_id) AS uniqueA, COUNT(DISTINCT ror) AS uniqueB FROM ${ns_core}.xref_hep_journal;

  -- link fields of research with higher education providers
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_for_hep\` AS (
    SELECT A.vers, A.code, B.ror 
    FROM \`${ns_core}.core_fors\` AS A
    CROSS JOIN \`${ns_core}.core_heps\` AS B
    GROUP BY vers,code,ror 
    ORDER BY vers,code,ror 
  );
  ALTER TABLE \`${ns_core}.xref_for_hep\` SET OPTIONS(description='cross reference table between core_fors and core_heps');
  ALTER TABLE ${ns_core}.xref_for_hep
  ALTER COLUMN vers SET OPTIONS (description='core_fors primary key (first half)'),
  ALTER COLUMN code SET OPTIONS (description='core_fors primary key (second half)'),
  ALTER COLUMN ror  SET OPTIONS (description='core_rors primary key');
  SELECT 'xref_for_hep', COUNT(1) AS total, COUNT(DISTINCT vers,code) AS uniqueA, COUNT(DISTINCT ror) AS uniqueB FROM ${ns_core}.xref_for_hep;

  -- link fields of research with journals
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_for_journal\` AS ( 
    SELECT 
      era_id,
      for_code, 
      1 / COUNT(1) OVER (PARTITION BY era_id) AS weight 
    FROM \`${ns_core}.core_journals\` 
    LEFT JOIN UNNEST(fors) AS for_code 
    GROUP BY era_id, for_code 
    ORDER BY era_id, for_code
  );
  ALTER TABLE \`${ns_core}.xref_for_journal\` SET OPTIONS(description='cross reference table between core_fors and core_journals');
  ALTER TABLE ${ns_core}.xref_for_journal
  ALTER COLUMN era_id   SET OPTIONS (description='core_journals primary key'),
  ALTER COLUMN for_code SET OPTIONS (description='core_fors primary key'),
  ALTER COLUMN weight   SET OPTIONS (description='apportionment of the field of research for this journal');
  SELECT 'xref_for_journal', COUNT(1) AS total, COUNT(DISTINCT for_code) AS uniqueA, COUNT(DISTINCT era_id) AS uniqueB, SUM(weight) AS total_portions FROM ${ns_core}.xref_for_journal;

  -- link fields of research with papers
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_for_paper\` AS (
    SELECT 
      A.doi, 
      B.for_code, 
      B.weight
    FROM      \`${ns_core}.core_papers\` AS A 
    LEFT JOIN \`${ns_core}.xref_for_journal\` AS B ON A.era_id = B.era_id
    ORDER BY doi,for_code 
  );
  ALTER TABLE \`${ns_core}.xref_for_paper\` SET OPTIONS(description='cross reference table between core_fors and core_papers');
  ALTER TABLE ${ns_core}.xref_for_paper
  ALTER COLUMN doi      SET OPTIONS (description='core_papers primary key'),
  ALTER COLUMN for_code SET OPTIONS (description='core_fors primary key'),
  ALTER COLUMN weight   SET OPTIONS (description='apportionment of the field of research for this paper');
  SELECT 'xref_for_paper', COUNT(1) AS total, COUNT(DISTINCT for_code) AS uniqueA, COUNT(DISTINCT doi) AS uniqueB, SUM(weight) AS total_portions FROM ${ns_core}.xref_for_paper;

  -- link institutions with papers and journals
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_ror_paper\` AS (
    SELECT doi, era_id, ror
    FROM \`${ns_core}.core_papers\` 
    LEFT JOIN UNNEST(rors) AS ror 
    ORDER BY doi,ror
  );
  ALTER TABLE \`${ns_core}.xref_ror_paper\` SET OPTIONS(description='cross reference table between core_rors and core_papers');
  ALTER TABLE ${ns_core}.xref_ror_paper
  ALTER COLUMN doi    SET OPTIONS (description='core_papers primary key'),
  ALTER COLUMN era_id SET OPTIONS (description='core_journals primary key'),
  ALTER COLUMN ror    SET OPTIONS (description='core_rors primary key');
  SELECT 'xref_ror_paper', COUNT(1) AS total, COUNT(DISTINCT ror) AS uniqueA, COUNT(DISTINCT doi) AS uniqueB FROM ${ns_core}.xref_ror_paper;

  -- link institutions with journals
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.xref_ror_journal\` AS (
    SELECT A.era_id, B.ror 
    FROM \`${ns_core}.xref_paper_journal\` AS A 
    INNER JOIN \`${ns_core}.xref_ror_paper\` AS B 
    ON A.doi = B.doi AND A.doi IS NOT NULL 
    GROUP BY era_id,ror 
    ORDER BY era_id,ror 
  );
  ALTER TABLE \`${ns_core}.xref_ror_journal\` SET OPTIONS(description='cross reference table between core_rors and core_journals');
  ALTER TABLE ${ns_core}.xref_ror_journal
  ALTER COLUMN era_id SET OPTIONS (description='core_journals primary key'),
  ALTER COLUMN ror    SET OPTIONS (description='core_rors primary key');
  SELECT 'xref_ror_journal', COUNT(1) AS total, COUNT(DISTINCT ror) AS uniqueA, COUNT(DISTINCT era_id) AS uniqueB FROM ${ns_core}.xref_ror_journal;

END;
`;
const compile_all = () => [ compile(app.conf()) ];
module.exports = { compile, compile_all };

if (require.main === module) compile_all().forEach(sql => console.log(sql));
