/*
## Summary
Prepares a core list of journals from an ERA Journal List.

## Description
Extracts data from the raw ERA table (originally from CSV), cleans up the ISSN values and maps into field of research codes (FoR) and cleaning up linking ISSN values using issn.org's mapping table.

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0

## Requires
table raw_journals_2018
table raw_journals_2023
table xref_issn_issnl
table core_fors

## Creates
table core_journals

*/
const compile = ({
  ns_core = 'project.dataset',
  replace = false,
}) => `
-- generated by: ${require('path').basename(__filename)}
BEGIN
  --CREATE OR REPLACE TABLE TEMP TABLE raw_journals AS (
  CREATE TEMP TABLE raw_journals AS (
    -- SELECT '2018' as era_round, * FROM \`${ns_core}.raw_journals_2018\` UNION ALL
    SELECT '2023' as era_round, * FROM \`${ns_core}.raw_journals_2023\` 
  );
  SELECT COUNT(1) FROM raw_journals;

  -- -- DISABLED: the official ISSN download list is missing many legitimate ISSN values that show up in the online search. Something is wrong with it.
  -- -- filter ISSNs
  -- CREATE TEMP TABLE filtered_issns AS (
  --   SELECT 
  --     era_round,
  --     era_id, 
  --     ARRAY_AGG(DISTINCT issn IGNORE NULLS) AS issns
  --   FROM raw_journals
  --   LEFT JOIN UNNEST(issns) AS issn
  --   LEFT JOIN \`${ns_core}.xref_issn_issnl\` AS B ON issn = B.issn
  --   LEFT JOIN \`${ns_core}.xref_issn_issnl\` AS C ON issn = C.issnl
  --   WHERE B.issn IS NOT NULL OR C.issnl IS NOT NULL
  --   GROUP BY era_round, era_id
  -- );

  CREATE TEMP TABLE filtered_issns AS (
    SELECT 
      era_round,
      era_id, 
      ARRAY_AGG(DISTINCT issn IGNORE NULLS) AS issns
    FROM raw_journals
    LEFT JOIN UNNEST(issns) AS issn
    GROUP BY era_round, era_id
  );
  SELECT COUNT(1) FROM filtered_issns;

  -- filter FoR codes and bring in FoR names
  CREATE TEMP TABLE filtered_codes AS (
    SELECT 
      era_round,
      era_id,
      ARRAY_AGG(STRUCT(vers,len,code,name,weight)) AS codes
    FROM (
      SELECT
        era_round,
        era_id, 
        IF(era_round = '2018', '2008', '2020') AS vers,
        LENGTH(fc.code) AS len,
        fc.code,
        IF(fc.code = 'MD', 'Multidisciplinary', B.name) AS name,
        fc.weight
      FROM raw_journals 
      LEFT JOIN UNNEST(weighted) AS fc
      LEFT JOIN \`${ns_core}.core_fors\` AS B ON fc.code = B.code
      WHERE fc.code = 'MD' OR B.code IS NOT NULL
    )
    GROUP BY era_round,era_id
  );
  SELECT COUNT(1) FROM filtered_codes;

  -- create the final table by excluding values that have no valid ISSN or FoR code
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.core_journals\` AS (
    SELECT 
      A.era_round,
      A.era_id,
      A.title,
      A.foreign_title AS ftitle,
      B.issns AS issns,
      C.codes AS fors
    FROM raw_journals AS A
    INNER JOIN filtered_issns AS B ON A.era_round = B.era_round AND A.era_id = B.era_id AND ARRAY_LENGTH(B.issns) > 0
    INNER JOIN filtered_codes AS C ON A.era_round = C.era_round AND A.era_id = C.era_id AND ARRAY_LENGTH(C.codes) > 0
    ORDER BY era_round,CAST(era_id AS INTEGER)
  );
  ALTER TABLE \`${ns_core}.core_journals\` SET OPTIONS(description="The ERA Journal List after filtering (see also raw_journals)");
  ALTER TABLE ${ns_core}.core_journals
  ALTER COLUMN era_round SET OPTIONS (description="Year of the ERA round"),
  ALTER COLUMN era_id    SET OPTIONS (description="A unique identifier assigned by the ARC"),
  ALTER COLUMN title     SET OPTIONS (description="English title of the journal"),
  ALTER COLUMN ftitle    SET OPTIONS (description="Non-English title of the journal"),
  ALTER COLUMN fors      SET OPTIONS (description="A list of Field of Research codes that have been assigned to the journal by the ARC"),
  ALTER COLUMN issns     SET OPTIONS (description="A list of ISSN codes associated with the journal");

  -- tests
  SELECT 'all journals should have at least one valid ISSN' AS description, IF(COUNTIF(ARRAY_LENGTH(issns) = 0) = 0, 'pass', 'fail') AS test FROM filtered_issns;
  SELECT 'all journals should have at least one valid FoR'  AS description, IF(COUNTIF(ARRAY_LENGTH(codes) = 0) = 0, 'pass', 'fail') AS test FROM filtered_codes;
  SELECT 'there should be no colliding ISSN values'         AS description, IF(COUNTIF(ARRAY_LENGTH(ids)  != 1) = 0, 'pass', 'fail') AS test FROM (
    SELECT ARRAY_AGG(DISTINCT era_id IGNORE NULLS) AS ids
    FROM ${ns_core}.core_journals
    LEFT JOIN UNNEST(issns) AS issn
    GROUP BY era_round,issn
  );
  SELECT 'certain fields should not be empty or null' AS description,
    IF(COUNTIF(era_id IS NULL OR era_id = '') = 0, 'pass', 'fail') AS test1,
    IF(COUNTIF(title  IS NULL OR title  = '') = 0, 'pass', 'fail') AS test2,
    IF(COUNTIF(ftitle IS NULL               ) = 0, 'pass', 'fail') AS test3
  FROM ${ns_core}.core_journals;

  SELECT 'dropped journal 2018', A.*
  FROM \`${ns_core}.raw_journals_2018\` AS A
  LEFT JOIN \`${ns_core}.core_journals\` AS B ON A.era_id = B.era_id AND B.era_round = '2018'
  WHERE B.era_id IS NULL;

  SELECT 'dropped journal 2023', A.*
  FROM \`${ns_core}.raw_journals_2023\` AS A
  LEFT JOIN \`${ns_core}.core_journals\` AS B ON A.era_id = B.era_id AND B.era_round = '2023'
  WHERE B.era_id IS NULL;

END;
`;
const compile_all = (args={}) => [ compile(args) ];
module.exports = { compile, compile_all };
if (require.main === module) require('app').cli_compile(compile_all);
