/*
## Summary
Assigns RCI categories to outputs or groups.

## Description
For methodology, see:
https://github.com/Curtin-Open-Knowledge-Initiative/for_benchmark_predictions/blob/main/docs/era_2018.md#indicator-distribution-of-papers-by-rci-classes

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0

## Requires
table core_papers
table rci_papers
table rci_grouping_*

## Creates
table rci_classes_papers
table rci_classes_fields
table rci_classes_summary
*/
// TODO: add grouping support and refactor table names
const compile = ({
  ns_core = 'project.dataset',
  scope   = 'world',
  digits  = 4,
  institution = 1,
  field   = 1,
  year    = 1,
  replace = false,
}) => `
-- generated by: ${__filename}
BEGIN 
  -- assign RCI classes to the papers
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.rci_classes_papers\` AS (
    SELECT 
      doi,
      A.field,
      A.year,

      CASE
        WHEN rci_world > B.d_c4 THEN 5
        WHEN rci_world > B.d_c3 THEN 4
        WHEN rci_world > B.d_c2 THEN 3
        WHEN rci_world > B.d_c1 THEN 2
        WHEN rci_world > B.d_c0 THEN 1
        ELSE 0
      END AS rci_class_dynamic_world,

      CASE
        WHEN rci_world > B.s_c5 THEN 6
        WHEN rci_world > B.s_c4 THEN 5
        WHEN rci_world > B.s_c3 THEN 4
        WHEN rci_world > B.s_c2 THEN 3
        WHEN rci_world > B.s_c1 THEN 2
        WHEN rci_world > B.s_c0 THEN 1
        ELSE 0
      END AS rci_class_static_world,

      CASE
        WHEN rci_local > B.s_c5 THEN 6
        WHEN rci_local > B.s_c4 THEN 5
        WHEN rci_local > B.s_c3 THEN 4
        WHEN rci_local > B.s_c2 THEN 3
        WHEN rci_local > B.s_c1 THEN 2
        WHEN rci_local > B.s_c0 THEN 1
        ELSE 0
      END AS rci_class_static_local,

      CASE
        WHEN hpi_world > B.s_c5 THEN 6
        WHEN hpi_world > B.s_c4 THEN 5
        WHEN hpi_world > B.s_c3 THEN 4
        WHEN hpi_world > B.s_c2 THEN 3
        WHEN hpi_world > B.s_c1 THEN 2
        WHEN hpi_world > B.s_c0 THEN 1
        ELSE 0
      END AS hpi_class_static_world

    FROM \`${ns_core}.rci_papers\` AS A
    LEFT JOIN \`${ns_core}.benchmarks_rci_${scope}_${digits}\` AS B ON A.field = B.field AND A.year = B.year
    ORDER BY field,year
  );

  -- assign static RCI classes to fields of research
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.rci_classes_fields\` AS (
    SELECT
      A.institution,
      A.field,
      A.year,
      CASE
        WHEN rci_world > B.d_c4 THEN 5
        WHEN rci_world > B.d_c3 THEN 4
        WHEN rci_world > B.d_c2 THEN 3
        WHEN rci_world > B.d_c1 THEN 2
        WHEN rci_world > B.d_c0 THEN 1
        ELSE 0
      END AS rci_class_dynamic_world,

      CASE
        WHEN rci_world > B.s_c5 THEN 6
        WHEN rci_world > B.s_c4 THEN 5
        WHEN rci_world > B.s_c3 THEN 4
        WHEN rci_world > B.s_c2 THEN 3
        WHEN rci_world > B.s_c1 THEN 2
        WHEN rci_world > B.s_c0 THEN 1
        ELSE 0
      END AS rci_class_static_world,

      CASE
        WHEN rci_local > B.s_c5 THEN 6
        WHEN rci_local > B.s_c4 THEN 5
        WHEN rci_local > B.s_c3 THEN 4
        WHEN rci_local > B.s_c2 THEN 3
        WHEN rci_local > B.s_c1 THEN 2
        WHEN rci_local > B.s_c0 THEN 1
        ELSE 0
      END AS rci_class_static_local,

      CASE
        WHEN hpi_world > B.s_c5 THEN 6
        WHEN hpi_world > B.s_c4 THEN 5
        WHEN hpi_world > B.s_c3 THEN 4
        WHEN hpi_world > B.s_c2 THEN 3
        WHEN hpi_world > B.s_c1 THEN 2
        WHEN hpi_world > B.s_c0 THEN 1
        ELSE 0
      END AS hpi_class_static_world
    FROM \`${ns_core}.rci_grouping_${scope}_${digits}_institution_field_year\` AS A
    LEFT JOIN \`${ns_core}.benchmarks_rci_${scope}_${digits}\` AS B ON A.field = B.field AND A.year = B.year
  );

  -- generate a summary table for the static method
  -- TODO: use weighted average apportionment to calculate a single RCI for a paper
  ${replace ? 'CREATE OR REPLACE TABLE' : 'CREATE TABLE IF NOT EXISTS'} \`${ns_core}.rci_classes_summary\` AS (
    SELECT 
      I AS institution,
      F.code AS field,
      COUNTIF(rci_class_static_world = 0) AS total_0,
      COUNTIF(rci_class_static_world = 1) AS total_1,
      COUNTIF(rci_class_static_world = 2) AS total_2,
      COUNTIF(rci_class_static_world = 3) AS total_3,
      COUNTIF(rci_class_static_world = 4) AS total_4,
      COUNTIF(rci_class_static_world = 5) AS total_5,
      COUNTIF(rci_class_static_world = 6) AS total_6,
      ROUND(SUM(IF(rci_class_static_world  = 0, F.weight, 0)),2) AS portions_0,
      ROUND(SUM(IF(rci_class_static_world  = 1, F.weight, 0)),2) AS portions_1,
      ROUND(SUM(IF(rci_class_static_world  = 2, F.weight, 0)),2) AS portions_2,
      ROUND(SUM(IF(rci_class_static_world  = 3, F.weight, 0)),2) AS portions_3,
      ROUND(SUM(IF(rci_class_static_world  = 4, F.weight, 0)),2) AS portions_4,
      ROUND(SUM(IF(rci_class_static_world  = 5, F.weight, 0)),2) AS portions_5,
      ROUND(SUM(IF(rci_class_static_world  = 6, F.weight, 0)),2) AS portions_6,

      COUNTIF(rci_class_static_world <= 1) AS rci_low , -- tally of papers in classes 0,1 using FoR fractions
      COUNTIF(rci_class_static_world >= 4) AS rci_high, -- tally of papers in classes 4,5,6 using FoR fractions
      0.0                                  AS rci_ratio -- ratio of rci_high to rci_low

      --hep_for_avg  , -- the percentage of papers (from all HEPs) in this class
      --hep_for_pct  , -- the percentage of papers (from the HEP) of all HEPs' papers in this class
    FROM \`${ns_core}.core_papers\` AS A
    INNER JOIN UNNEST(heps) AS I
    INNER JOIN UNNEST(fors) AS F
    LEFT JOIN \`${ns_core}.rci_classes_papers\` AS B ON A.doi = B.doi
    GROUP BY institution,field
    ORDER BY institution,field
  );
  UPDATE \`${ns_core}.rci_classes_summary\` SET rci_ratio = IF(rci_low=0, rci_high, rci_high / rci_low) WHERE true;
END;`;
const compile_all = (args={}) => [ compile(args) ];
module.exports = { compile, compile_all };
if (require.main === module) require('app').cli_compile(compile_all);
