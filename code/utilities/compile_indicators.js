/*
## Summary
Run SQL queries to (re)build ERA-like indicator tables.

## Description
This script will build the series of indicator_* tables in the database that you link to. The 
script first requires that the benchamrk_* series have been built by copmile_benchmarks.js. 
Indicators can be set to build for filtered sets of institutions, topics of research and years, but 
should match the configuration used for benchmarks. By default, indicators will build for ERA 2023,
using Australia HEPS, 2020 ANZSRC codes and the year range 2016 - 2021 (inclusive).

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0
*/
const app = require('app');

function compile_indicators(conf={}) {
  const low_volume  = require('../queries/ind_low_volume'        ).compile;
  const interdisc   = require('../queries/ind_interdisc'         ).compile;
  const ratings     = require('../queries/ind_ratings'           ).compile;
  const pub_profile = require('../queries/ind_publishing_profile').compile;

  // query strings that will eventually be combined into a single output
  const queries = [`
    -------------------------------------------------------------------------------
    -- WARNING: these queries are machine-generated. Any changes that you make   --
    -- here will be overwritten on the next compilation. If a permanent query    --
    -- alteration is required then modify the files in /code/queries/            --
    -------------------------------------------------------------------------------
    -- generated by: ${__filename}
    CREATE SCHEMA IF NOT EXISTS \`${conf.ns_core}\`;
  `];
  
  // low volume threshold
  ['world','local'].forEach(scope => [4,2].forEach(digits => queries.push(low_volume(Object.assign({}, conf, {scope,digits})))));

  // interdisciplinary profiles
  ['world','local'].forEach(scope => [4,2].forEach(digits => queries.push(interdisc(Object.assign({}, conf, {scope,digits})))));

  // publishing profiles
  ['world','local'].forEach(scope => 
    [4,2].forEach(digits => {
      queries.push(pub_profile(Object.assign({}, conf, { scope, digits, journal: true, field: true, year: true })));
      queries.push(pub_profile(Object.assign({}, conf, { scope, digits, journal: true, field: true, year:false })));
      queries.push(pub_profile(Object.assign({}, conf, { scope, digits, journal: true, field:false, year: true })));
      queries.push(pub_profile(Object.assign({}, conf, { scope, digits, journal:false, field: true, year: true })));
      queries.push(pub_profile(Object.assign({}, conf, { scope, digits, journal: true, field:false, year:false })));
      queries.push(pub_profile(Object.assign({}, conf, { scope, digits, journal:false, field: true, year:false })));
      queries.push(pub_profile(Object.assign({}, conf, { scope, digits, journal:false, field:false, year: true })));
    })
  );

  // ERA ratings estimation
  // TODO: this is not implemented yet
  ['world','local'].forEach(scope => [4,2].forEach(digits => queries.push(ratings(Object.assign({}, conf, {scope,digits})))));

  return queries;
}
module.exports = compile_indicators;

if (require.main === module) {
  (async () => { for (let sql of module.exports(app.conf())) await app.query(sql); })()
}
