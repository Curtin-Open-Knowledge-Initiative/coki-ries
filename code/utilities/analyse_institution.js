/*
## Summary
Build or rebuild analysis tables for a specific institution.

## Description
Builds a set of tables that focus on analysis for a single institution (defined by its ROR code and name)

## Contacts
julian.tonti-filippini@curtin.edu.au

## License
Apache 2.0
*/
const app = require('app');

function compile_report_institution(conf={}) {
  const report_institution = require('../queries/report_institution').compile;
  // if (!conf.rorcode) {
  //   const {code} = await get_user_input();
  //   conf.rorcode = code;
  // }
  conf.digits = 4;

  const queries = [`
    -------------------------------------------------------------------------------
    -- WARNING: these queries are machine-generated. Any changes that you make   --
    -- here will be overwritten on the next compilation. If a permanent query    --
    -- alteration is required then modify the files in /code/queries/            --
    -------------------------------------------------------------------------------
    -- generated by: ${__filename}
    CREATE SCHEMA IF NOT EXISTS \`${conf.ns_core}\`;
  `];
  queries.push(report_institution(conf));
  return queries;
}
async function get_user_input() {
  const rl = require('readline').createInterface({
    input  : process.stdin,
    output : process.stdout
  });
  let code = await new Promise(pass => rl.question('Enter the ror.org code for the institution (default: https://ror.org/02n415q13) -> ', pass));
  rl.close();
  code = code.split(' ')[0].toLowerCase().trim();
  if (!code) code = 'https://ror.org/02n415q13';

  return {code};
}
module.exports = compile_report_institution;

if (require.main === module) {
  async function run_queries(conf) {
    const queries = await compile_report_institution(conf);
    for (let sql of queries) {
      if (conf.verbose) console.log(sql);
      if (conf.dryrun) continue;
      await app.query(sql);
    }
  }  
  run_queries(app.conf());
}
